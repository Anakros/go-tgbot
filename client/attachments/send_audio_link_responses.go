package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SendAudioLinkReader is a Reader for the SendAudioLink structure.
type SendAudioLinkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendAudioLinkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendAudioLinkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSendAudioLinkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendAudioLinkOK creates a SendAudioLinkOK with default headers values
func NewSendAudioLinkOK() *SendAudioLinkOK {
	return &SendAudioLinkOK{}
}

/*SendAudioLinkOK handles this case with default header values.

SendAudioLinkOK send audio link o k
*/
type SendAudioLinkOK struct {
	Payload *models.ResponseMessage
}

func (o *SendAudioLinkOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendAudio#link][%d] sendAudioLinkOK  %+v", 200, o.Payload)
}

func (o *SendAudioLinkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendAudioLinkBadRequest creates a SendAudioLinkBadRequest with default headers values
func NewSendAudioLinkBadRequest() *SendAudioLinkBadRequest {
	return &SendAudioLinkBadRequest{}
}

/*SendAudioLinkBadRequest handles this case with default header values.

Error
*/
type SendAudioLinkBadRequest struct {
	Payload *models.Error
}

func (o *SendAudioLinkBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendAudio#link][%d] sendAudioLinkBadRequest  %+v", 400, o.Payload)
}

func (o *SendAudioLinkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
