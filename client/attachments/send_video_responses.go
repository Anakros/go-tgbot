package attachments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SendVideoReader is a Reader for the SendVideo structure.
type SendVideoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendVideoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendVideoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSendVideoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendVideoOK creates a SendVideoOK with default headers values
func NewSendVideoOK() *SendVideoOK {
	return &SendVideoOK{}
}

/*SendVideoOK handles this case with default header values.

SendVideoOK send video o k
*/
type SendVideoOK struct {
	Payload *models.ResponseMessage
}

func (o *SendVideoOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendVideo][%d] sendVideoOK  %+v", 200, o.Payload)
}

func (o *SendVideoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendVideoBadRequest creates a SendVideoBadRequest with default headers values
func NewSendVideoBadRequest() *SendVideoBadRequest {
	return &SendVideoBadRequest{}
}

/*SendVideoBadRequest handles this case with default header values.

Error
*/
type SendVideoBadRequest struct {
	Payload *models.Error
}

func (o *SendVideoBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendVideo][%d] sendVideoBadRequest  %+v", 400, o.Payload)
}

func (o *SendVideoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
