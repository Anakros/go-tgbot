package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// EditMessageReplyMarkupReader is a Reader for the EditMessageReplyMarkup structure.
type EditMessageReplyMarkupReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EditMessageReplyMarkupReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewEditMessageReplyMarkupOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewEditMessageReplyMarkupBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewEditMessageReplyMarkupOK creates a EditMessageReplyMarkupOK with default headers values
func NewEditMessageReplyMarkupOK() *EditMessageReplyMarkupOK {
	return &EditMessageReplyMarkupOK{}
}

/*EditMessageReplyMarkupOK handles this case with default header values.

EditMessageReplyMarkupOK edit message reply markup o k
*/
type EditMessageReplyMarkupOK struct {
	Payload EditMessageReplyMarkupOKBody
}

func (o *EditMessageReplyMarkupOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/editMessageReplyMarkup][%d] editMessageReplyMarkupOK  %+v", 200, o.Payload)
}

func (o *EditMessageReplyMarkupOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEditMessageReplyMarkupBadRequest creates a EditMessageReplyMarkupBadRequest with default headers values
func NewEditMessageReplyMarkupBadRequest() *EditMessageReplyMarkupBadRequest {
	return &EditMessageReplyMarkupBadRequest{}
}

/*EditMessageReplyMarkupBadRequest handles this case with default header values.

Error
*/
type EditMessageReplyMarkupBadRequest struct {
	Payload *models.Error
}

func (o *EditMessageReplyMarkupBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/editMessageReplyMarkup][%d] editMessageReplyMarkupBadRequest  %+v", 400, o.Payload)
}

func (o *EditMessageReplyMarkupBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*EditMessageReplyMarkupBody edit message reply markup body
swagger:model EditMessageReplyMarkupBody
*/
type EditMessageReplyMarkupBody struct {

	// chat id
	ChatID interface{} `json:"chat_id,omitempty"`

	// inline message id
	InlineMessageID string `json:"inline_message_id,omitempty"`

	// message id
	MessageID int64 `json:"message_id,omitempty"`

	// reply markup
	ReplyMarkup *models.InlineKeyboardMarkup `json:"reply_markup,omitempty"`
}

/*EditMessageReplyMarkupOKBody edit message reply markup o k body
swagger:model EditMessageReplyMarkupOKBody
*/
type EditMessageReplyMarkupOKBody struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// error code
	// Required: true
	ErrorCode *int64 `json:"error_code"`

	// ok
	// Required: true
	Ok *bool `json:"ok"`

	// result
	// Required: true
	Result interface{} `json:"result"`
}
