package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SendMessageReader is a Reader for the SendMessage structure.
type SendMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewSendMessageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendMessageOK creates a SendMessageOK with default headers values
func NewSendMessageOK() *SendMessageOK {
	return &SendMessageOK{}
}

/*SendMessageOK handles this case with default header values.

SendMessageOK send message o k
*/
type SendMessageOK struct {
	Payload *models.ResponseMessage
}

func (o *SendMessageOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMessage][%d] sendMessageOK  %+v", 200, o.Payload)
}

func (o *SendMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendMessageBadRequest creates a SendMessageBadRequest with default headers values
func NewSendMessageBadRequest() *SendMessageBadRequest {
	return &SendMessageBadRequest{}
}

/*SendMessageBadRequest handles this case with default header values.

Error
*/
type SendMessageBadRequest struct {
	Payload *models.Error
}

func (o *SendMessageBadRequest) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMessage][%d] sendMessageBadRequest  %+v", 400, o.Payload)
}

func (o *SendMessageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
