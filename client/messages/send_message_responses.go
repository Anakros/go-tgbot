package messages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/olebedev/go-tgbot/models"
)

// SendMessageReader is a Reader for the SendMessage structure.
type SendMessageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendMessageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewSendMessageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendMessageOK creates a SendMessageOK with default headers values
func NewSendMessageOK() *SendMessageOK {
	return &SendMessageOK{}
}

/*SendMessageOK handles this case with default header values.

SendMessageOK send message o k
*/
type SendMessageOK struct {
	Payload *models.ResponseMessage
}

func (o *SendMessageOK) Error() string {
	return fmt.Sprintf("[POST /bot{token}/sendMessage][%d] sendMessageOK  %+v", 200, o.Payload)
}

func (o *SendMessageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ResponseMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SendMessageBody send message body
swagger:model SendMessageBody
*/
type SendMessageBody struct {

	// chat id
	// Required: true
	ChatID interface{} `json:"chat_id"`

	// disable notification
	DisableNotification bool `json:"disable_notification,omitempty"`

	// disable web page preview
	DisableWebPagePreview bool `json:"disable_web_page_preview,omitempty"`

	// parse mode
	ParseMode string `json:"parse_mode,omitempty"`

	// reply markup
	ReplyMarkup interface{} `json:"reply_markup,omitempty"`

	// reply to message id
	ReplyToMessageID int64 `json:"reply_to_message_id,omitempty"`

	// text
	// Required: true
	Text *string `json:"text"`
}
