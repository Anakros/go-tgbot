package chats

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// KickChatMemberReader is a Reader for the KickChatMember structure.
type KickChatMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *KickChatMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewKickChatMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewKickChatMemberOK creates a KickChatMemberOK with default headers values
func NewKickChatMemberOK() *KickChatMemberOK {
	return &KickChatMemberOK{}
}

/*KickChatMemberOK handles this case with default header values.

KickChatMemberOK kick chat member o k
*/
type KickChatMemberOK struct {
	Payload KickChatMemberOKBody
}

func (o *KickChatMemberOK) Error() string {
	return fmt.Sprintf("[GET /bot{token}/kickChatMember][%d] kickChatMemberOK  %+v", 200, o.Payload)
}

func (o *KickChatMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*KickChatMemberOKBody kick chat member o k body
swagger:model KickChatMemberOKBody
*/
type KickChatMemberOKBody struct {

	// description
	// Required: true
	Description *string `json:"description"`

	// error code
	// Required: true
	ErrorCode *int64 `json:"error_code"`

	// ok
	// Required: true
	Ok *bool `json:"ok"`

	// result
	// Required: true
	Result *bool `json:"result"`
}
