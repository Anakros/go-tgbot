// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/promote_chat_member_body.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *PromoteChatMemberBody) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *PromoteChatMemberBody) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.CanChangeInfo != nil {
		if true {
			if *mj.CanChangeInfo {
				buf.WriteString(`"can_change_info":true`)
			} else {
				buf.WriteString(`"can_change_info":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanDeleteMessages != nil {
		if true {
			if *mj.CanDeleteMessages {
				buf.WriteString(`"can_delete_messages":true`)
			} else {
				buf.WriteString(`"can_delete_messages":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanEditMessages != nil {
		if true {
			if *mj.CanEditMessages {
				buf.WriteString(`"can_edit_messages":true`)
			} else {
				buf.WriteString(`"can_edit_messages":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanInviteUsers != nil {
		if true {
			if *mj.CanInviteUsers {
				buf.WriteString(`"can_invite_users":true`)
			} else {
				buf.WriteString(`"can_invite_users":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanPinMessages != nil {
		if true {
			if *mj.CanPinMessages {
				buf.WriteString(`"can_pin_messages":true`)
			} else {
				buf.WriteString(`"can_pin_messages":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanPostMessages != nil {
		if true {
			if *mj.CanPostMessages {
				buf.WriteString(`"can_post_messages":true`)
			} else {
				buf.WriteString(`"can_post_messages":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanPromoteMembers != nil {
		if true {
			if *mj.CanPromoteMembers {
				buf.WriteString(`"can_promote_members":true`)
			} else {
				buf.WriteString(`"can_promote_members":false`)
			}
			buf.WriteByte(',')
		}
	}
	if mj.CanRestrictMembers != nil {
		if true {
			if *mj.CanRestrictMembers {
				buf.WriteString(`"can_restrict_members":true`)
			} else {
				buf.WriteString(`"can_restrict_members":false`)
			}
			buf.WriteByte(',')
		}
	}
	buf.WriteString(`"chat_id":`)
	/* Interface types must use runtime reflection. type=interface {} kind=interface */
	err = buf.Encode(mj.ChatID)
	if err != nil {
		return err
	}
	if mj.UserID != nil {
		buf.WriteString(`,"user_id":`)
		fflib.FormatBits2(buf, uint64(*mj.UserID), 10, *mj.UserID < 0)
	} else {
		buf.WriteString(`,"user_id":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_PromoteChatMemberBodybase = iota
	ffj_t_PromoteChatMemberBodyno_such_key

	ffj_t_PromoteChatMemberBody_CanChangeInfo

	ffj_t_PromoteChatMemberBody_CanDeleteMessages

	ffj_t_PromoteChatMemberBody_CanEditMessages

	ffj_t_PromoteChatMemberBody_CanInviteUsers

	ffj_t_PromoteChatMemberBody_CanPinMessages

	ffj_t_PromoteChatMemberBody_CanPostMessages

	ffj_t_PromoteChatMemberBody_CanPromoteMembers

	ffj_t_PromoteChatMemberBody_CanRestrictMembers

	ffj_t_PromoteChatMemberBody_ChatID

	ffj_t_PromoteChatMemberBody_UserID
)

var ffj_key_PromoteChatMemberBody_CanChangeInfo = []byte("can_change_info")

var ffj_key_PromoteChatMemberBody_CanDeleteMessages = []byte("can_delete_messages")

var ffj_key_PromoteChatMemberBody_CanEditMessages = []byte("can_edit_messages")

var ffj_key_PromoteChatMemberBody_CanInviteUsers = []byte("can_invite_users")

var ffj_key_PromoteChatMemberBody_CanPinMessages = []byte("can_pin_messages")

var ffj_key_PromoteChatMemberBody_CanPostMessages = []byte("can_post_messages")

var ffj_key_PromoteChatMemberBody_CanPromoteMembers = []byte("can_promote_members")

var ffj_key_PromoteChatMemberBody_CanRestrictMembers = []byte("can_restrict_members")

var ffj_key_PromoteChatMemberBody_ChatID = []byte("chat_id")

var ffj_key_PromoteChatMemberBody_UserID = []byte("user_id")

func (uj *PromoteChatMemberBody) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *PromoteChatMemberBody) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_PromoteChatMemberBodybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_PromoteChatMemberBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_PromoteChatMemberBody_CanChangeInfo, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanChangeInfo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanDeleteMessages, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanDeleteMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanEditMessages, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanEditMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanInviteUsers, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanInviteUsers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanPinMessages, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanPinMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanPostMessages, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanPostMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanPromoteMembers, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanPromoteMembers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_CanRestrictMembers, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_CanRestrictMembers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_PromoteChatMemberBody_ChatID, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_ChatID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_PromoteChatMemberBody_UserID, kn) {
						currentKey = ffj_t_PromoteChatMemberBody_UserID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_UserID, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_UserID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_PromoteChatMemberBody_ChatID, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_ChatID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanRestrictMembers, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanRestrictMembers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanPromoteMembers, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanPromoteMembers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanPostMessages, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanPostMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanPinMessages, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanPinMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanInviteUsers, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanInviteUsers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanEditMessages, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanEditMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_PromoteChatMemberBody_CanDeleteMessages, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanDeleteMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_PromoteChatMemberBody_CanChangeInfo, kn) {
					currentKey = ffj_t_PromoteChatMemberBody_CanChangeInfo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_PromoteChatMemberBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_PromoteChatMemberBody_CanChangeInfo:
					goto handle_CanChangeInfo

				case ffj_t_PromoteChatMemberBody_CanDeleteMessages:
					goto handle_CanDeleteMessages

				case ffj_t_PromoteChatMemberBody_CanEditMessages:
					goto handle_CanEditMessages

				case ffj_t_PromoteChatMemberBody_CanInviteUsers:
					goto handle_CanInviteUsers

				case ffj_t_PromoteChatMemberBody_CanPinMessages:
					goto handle_CanPinMessages

				case ffj_t_PromoteChatMemberBody_CanPostMessages:
					goto handle_CanPostMessages

				case ffj_t_PromoteChatMemberBody_CanPromoteMembers:
					goto handle_CanPromoteMembers

				case ffj_t_PromoteChatMemberBody_CanRestrictMembers:
					goto handle_CanRestrictMembers

				case ffj_t_PromoteChatMemberBody_ChatID:
					goto handle_ChatID

				case ffj_t_PromoteChatMemberBody_UserID:
					goto handle_UserID

				case ffj_t_PromoteChatMemberBodyno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CanChangeInfo:

	/* handler: uj.CanChangeInfo type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanChangeInfo = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanChangeInfo = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanDeleteMessages:

	/* handler: uj.CanDeleteMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanDeleteMessages = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanDeleteMessages = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanEditMessages:

	/* handler: uj.CanEditMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanEditMessages = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanEditMessages = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanInviteUsers:

	/* handler: uj.CanInviteUsers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanInviteUsers = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanInviteUsers = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPinMessages:

	/* handler: uj.CanPinMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanPinMessages = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanPinMessages = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPostMessages:

	/* handler: uj.CanPostMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanPostMessages = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanPostMessages = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPromoteMembers:

	/* handler: uj.CanPromoteMembers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanPromoteMembers = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanPromoteMembers = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanRestrictMembers:

	/* handler: uj.CanRestrictMembers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.CanRestrictMembers = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.CanRestrictMembers = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ChatID:

	/* handler: uj.ChatID type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.ChatID)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UserID:

	/* handler: uj.UserID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.UserID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int64(tval)
			uj.UserID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
