// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/webhook_info.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *WebhookInfo) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *WebhookInfo) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"allowed_updates":`)
	if mj.AllowedUpdates != nil {
		buf.WriteString(`[`)
		for i, v := range mj.AllowedUpdates {
			if i != 0 {
				buf.WriteString(`,`)
			}
			fflib.WriteJsonString(buf, string(v))
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	if mj.HasCustomCertificate != nil {
		if *mj.HasCustomCertificate {
			buf.WriteString(`,"has_custom_certificate":true`)
		} else {
			buf.WriteString(`,"has_custom_certificate":false`)
		}
	} else {
		buf.WriteString(`,"has_custom_certificate":null`)
	}
	buf.WriteByte(',')
	if mj.LastErrorDate != 0 {
		buf.WriteString(`"last_error_date":`)
		fflib.FormatBits2(buf, uint64(mj.LastErrorDate), 10, mj.LastErrorDate < 0)
		buf.WriteByte(',')
	}
	if len(mj.LastErrorMessage) != 0 {
		buf.WriteString(`"last_error_message":`)
		fflib.WriteJsonString(buf, string(mj.LastErrorMessage))
		buf.WriteByte(',')
	}
	if mj.MaxConnections != 0 {
		buf.WriteString(`"max_connections":`)
		fflib.FormatBits2(buf, uint64(mj.MaxConnections), 10, mj.MaxConnections < 0)
		buf.WriteByte(',')
	}
	if mj.PendingUpdateCount != nil {
		buf.WriteString(`"pending_update_count":`)
		fflib.FormatBits2(buf, uint64(*mj.PendingUpdateCount), 10, *mj.PendingUpdateCount < 0)
	} else {
		buf.WriteString(`"pending_update_count":null`)
	}
	if mj.URL != nil {
		buf.WriteString(`,"url":`)
		fflib.WriteJsonString(buf, string(*mj.URL))
	} else {
		buf.WriteString(`,"url":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_WebhookInfobase = iota
	ffj_t_WebhookInfono_such_key

	ffj_t_WebhookInfo_AllowedUpdates

	ffj_t_WebhookInfo_HasCustomCertificate

	ffj_t_WebhookInfo_LastErrorDate

	ffj_t_WebhookInfo_LastErrorMessage

	ffj_t_WebhookInfo_MaxConnections

	ffj_t_WebhookInfo_PendingUpdateCount

	ffj_t_WebhookInfo_URL
)

var ffj_key_WebhookInfo_AllowedUpdates = []byte("allowed_updates")

var ffj_key_WebhookInfo_HasCustomCertificate = []byte("has_custom_certificate")

var ffj_key_WebhookInfo_LastErrorDate = []byte("last_error_date")

var ffj_key_WebhookInfo_LastErrorMessage = []byte("last_error_message")

var ffj_key_WebhookInfo_MaxConnections = []byte("max_connections")

var ffj_key_WebhookInfo_PendingUpdateCount = []byte("pending_update_count")

var ffj_key_WebhookInfo_URL = []byte("url")

func (uj *WebhookInfo) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *WebhookInfo) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_WebhookInfobase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_WebhookInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_WebhookInfo_AllowedUpdates, kn) {
						currentKey = ffj_t_WebhookInfo_AllowedUpdates
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'h':

					if bytes.Equal(ffj_key_WebhookInfo_HasCustomCertificate, kn) {
						currentKey = ffj_t_WebhookInfo_HasCustomCertificate
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_WebhookInfo_LastErrorDate, kn) {
						currentKey = ffj_t_WebhookInfo_LastErrorDate
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_WebhookInfo_LastErrorMessage, kn) {
						currentKey = ffj_t_WebhookInfo_LastErrorMessage
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'm':

					if bytes.Equal(ffj_key_WebhookInfo_MaxConnections, kn) {
						currentKey = ffj_t_WebhookInfo_MaxConnections
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_WebhookInfo_PendingUpdateCount, kn) {
						currentKey = ffj_t_WebhookInfo_PendingUpdateCount
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_WebhookInfo_URL, kn) {
						currentKey = ffj_t_WebhookInfo_URL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_WebhookInfo_URL, kn) {
					currentKey = ffj_t_WebhookInfo_URL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_WebhookInfo_PendingUpdateCount, kn) {
					currentKey = ffj_t_WebhookInfo_PendingUpdateCount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookInfo_MaxConnections, kn) {
					currentKey = ffj_t_WebhookInfo_MaxConnections
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookInfo_LastErrorMessage, kn) {
					currentKey = ffj_t_WebhookInfo_LastErrorMessage
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookInfo_LastErrorDate, kn) {
					currentKey = ffj_t_WebhookInfo_LastErrorDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookInfo_HasCustomCertificate, kn) {
					currentKey = ffj_t_WebhookInfo_HasCustomCertificate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_WebhookInfo_AllowedUpdates, kn) {
					currentKey = ffj_t_WebhookInfo_AllowedUpdates
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_WebhookInfono_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_WebhookInfo_AllowedUpdates:
					goto handle_AllowedUpdates

				case ffj_t_WebhookInfo_HasCustomCertificate:
					goto handle_HasCustomCertificate

				case ffj_t_WebhookInfo_LastErrorDate:
					goto handle_LastErrorDate

				case ffj_t_WebhookInfo_LastErrorMessage:
					goto handle_LastErrorMessage

				case ffj_t_WebhookInfo_MaxConnections:
					goto handle_MaxConnections

				case ffj_t_WebhookInfo_PendingUpdateCount:
					goto handle_PendingUpdateCount

				case ffj_t_WebhookInfo_URL:
					goto handle_URL

				case ffj_t_WebhookInfono_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_AllowedUpdates:

	/* handler: uj.AllowedUpdates type=[]models.AllowedUpdate kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.AllowedUpdates = nil
		} else {

			uj.AllowedUpdates = []AllowedUpdate{}

			wantVal := true

			for {

				var tmp_uj__AllowedUpdates AllowedUpdate

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__AllowedUpdates type=models.AllowedUpdate kind=string quoted=false*/

				{

					{
						if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
							return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for AllowedUpdate", tok))
						}
					}

					if tok == fflib.FFTok_null {

					} else {

						outBuf := fs.Output.Bytes()

						tmp_uj__AllowedUpdates = AllowedUpdate(string(outBuf))

					}
				}

				uj.AllowedUpdates = append(uj.AllowedUpdates, tmp_uj__AllowedUpdates)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_HasCustomCertificate:

	/* handler: uj.HasCustomCertificate type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

			uj.HasCustomCertificate = nil

		} else {
			tmpb := fs.Output.Bytes()

			var tval bool

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				tval = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				tval = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

			uj.HasCustomCertificate = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastErrorDate:

	/* handler: uj.LastErrorDate type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.LastErrorDate = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_LastErrorMessage:

	/* handler: uj.LastErrorMessage type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.LastErrorMessage = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_MaxConnections:

	/* handler: uj.MaxConnections type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.MaxConnections = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PendingUpdateCount:

	/* handler: uj.PendingUpdateCount type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.PendingUpdateCount = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int64(tval)
			uj.PendingUpdateCount = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: uj.URL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.URL = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.URL = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
