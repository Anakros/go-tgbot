// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/inline_keyboard_button.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *InlineKeyboardButton) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.CallbackData) != 0 {
		buf.WriteString(`"callback_data":`)
		fflib.WriteJsonString(buf, string(mj.CallbackData))
		buf.WriteByte(',')
	}
	if mj.CallbackGame != nil {
		buf.WriteString(`"callback_game":`)
		/* Interface types must use runtime reflection. type=models.CallbackGame kind=interface */
		err = buf.Encode(mj.CallbackGame)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if mj.Pay != false {
		if mj.Pay {
			buf.WriteString(`"pay":true`)
		} else {
			buf.WriteString(`"pay":false`)
		}
		buf.WriteByte(',')
	}
	if len(mj.SwitchInlineQuery) != 0 {
		buf.WriteString(`"switch_inline_query":`)
		fflib.WriteJsonString(buf, string(mj.SwitchInlineQuery))
		buf.WriteByte(',')
	}
	if len(mj.SwitchInlineQueryCurrentChat) != 0 {
		buf.WriteString(`"switch_inline_query_current_chat":`)
		fflib.WriteJsonString(buf, string(mj.SwitchInlineQueryCurrentChat))
		buf.WriteByte(',')
	}
	if len(mj.Text) != 0 {
		buf.WriteString(`"text":`)
		fflib.WriteJsonString(buf, string(mj.Text))
		buf.WriteByte(',')
	}
	if len(mj.URL) != 0 {
		buf.WriteString(`"url":`)
		fflib.WriteJsonString(buf, string(mj.URL))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_InlineKeyboardButtonbase = iota
	ffj_t_InlineKeyboardButtonno_such_key

	ffj_t_InlineKeyboardButton_CallbackData

	ffj_t_InlineKeyboardButton_CallbackGame

	ffj_t_InlineKeyboardButton_Pay

	ffj_t_InlineKeyboardButton_SwitchInlineQuery

	ffj_t_InlineKeyboardButton_SwitchInlineQueryCurrentChat

	ffj_t_InlineKeyboardButton_Text

	ffj_t_InlineKeyboardButton_URL
)

var ffj_key_InlineKeyboardButton_CallbackData = []byte("callback_data")

var ffj_key_InlineKeyboardButton_CallbackGame = []byte("callback_game")

var ffj_key_InlineKeyboardButton_Pay = []byte("pay")

var ffj_key_InlineKeyboardButton_SwitchInlineQuery = []byte("switch_inline_query")

var ffj_key_InlineKeyboardButton_SwitchInlineQueryCurrentChat = []byte("switch_inline_query_current_chat")

var ffj_key_InlineKeyboardButton_Text = []byte("text")

var ffj_key_InlineKeyboardButton_URL = []byte("url")

func (uj *InlineKeyboardButton) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *InlineKeyboardButton) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_InlineKeyboardButtonbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_InlineKeyboardButtonno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_InlineKeyboardButton_CallbackData, kn) {
						currentKey = ffj_t_InlineKeyboardButton_CallbackData
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineKeyboardButton_CallbackGame, kn) {
						currentKey = ffj_t_InlineKeyboardButton_CallbackGame
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_InlineKeyboardButton_Pay, kn) {
						currentKey = ffj_t_InlineKeyboardButton_Pay
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_InlineKeyboardButton_SwitchInlineQuery, kn) {
						currentKey = ffj_t_InlineKeyboardButton_SwitchInlineQuery
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineKeyboardButton_SwitchInlineQueryCurrentChat, kn) {
						currentKey = ffj_t_InlineKeyboardButton_SwitchInlineQueryCurrentChat
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_InlineKeyboardButton_Text, kn) {
						currentKey = ffj_t_InlineKeyboardButton_Text
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_InlineKeyboardButton_URL, kn) {
						currentKey = ffj_t_InlineKeyboardButton_URL
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineKeyboardButton_URL, kn) {
					currentKey = ffj_t_InlineKeyboardButton_URL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineKeyboardButton_Text, kn) {
					currentKey = ffj_t_InlineKeyboardButton_Text
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineKeyboardButton_SwitchInlineQueryCurrentChat, kn) {
					currentKey = ffj_t_InlineKeyboardButton_SwitchInlineQueryCurrentChat
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineKeyboardButton_SwitchInlineQuery, kn) {
					currentKey = ffj_t_InlineKeyboardButton_SwitchInlineQuery
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineKeyboardButton_Pay, kn) {
					currentKey = ffj_t_InlineKeyboardButton_Pay
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineKeyboardButton_CallbackGame, kn) {
					currentKey = ffj_t_InlineKeyboardButton_CallbackGame
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineKeyboardButton_CallbackData, kn) {
					currentKey = ffj_t_InlineKeyboardButton_CallbackData
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_InlineKeyboardButtonno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_InlineKeyboardButton_CallbackData:
					goto handle_CallbackData

				case ffj_t_InlineKeyboardButton_CallbackGame:
					goto handle_CallbackGame

				case ffj_t_InlineKeyboardButton_Pay:
					goto handle_Pay

				case ffj_t_InlineKeyboardButton_SwitchInlineQuery:
					goto handle_SwitchInlineQuery

				case ffj_t_InlineKeyboardButton_SwitchInlineQueryCurrentChat:
					goto handle_SwitchInlineQueryCurrentChat

				case ffj_t_InlineKeyboardButton_Text:
					goto handle_Text

				case ffj_t_InlineKeyboardButton_URL:
					goto handle_URL

				case ffj_t_InlineKeyboardButtonno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CallbackData:

	/* handler: uj.CallbackData type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.CallbackData = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CallbackGame:

	/* handler: uj.CallbackGame type=models.CallbackGame kind=interface quoted=false*/

	{
		/* Falling back. type=models.CallbackGame kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.CallbackGame)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Pay:

	/* handler: uj.Pay type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.Pay = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.Pay = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchInlineQuery:

	/* handler: uj.SwitchInlineQuery type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SwitchInlineQuery = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchInlineQueryCurrentChat:

	/* handler: uj.SwitchInlineQueryCurrentChat type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SwitchInlineQueryCurrentChat = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Text:

	/* handler: uj.Text type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Text = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_URL:

	/* handler: uj.URL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.URL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
