// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/send_invoice_body.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *SendInvoiceBody) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *SendInvoiceBody) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.ChatID != nil {
		buf.WriteString(`{"chat_id":`)
		fflib.FormatBits2(buf, uint64(*mj.ChatID), 10, *mj.ChatID < 0)
	} else {
		buf.WriteString(`{"chat_id":null`)
	}
	if mj.Currency != nil {
		buf.WriteString(`,"currency":`)
		fflib.WriteJsonString(buf, string(*mj.Currency))
	} else {
		buf.WriteString(`,"currency":null`)
	}
	if mj.Description != nil {
		buf.WriteString(`,"description":`)
		fflib.WriteJsonString(buf, string(*mj.Description))
	} else {
		buf.WriteString(`,"description":null`)
	}
	buf.WriteByte(',')
	if mj.DisableNotification != false {
		if mj.DisableNotification {
			buf.WriteString(`"disable_notification":true`)
		} else {
			buf.WriteString(`"disable_notification":false`)
		}
		buf.WriteByte(',')
	}
	if mj.IsFlexible != false {
		if mj.IsFlexible {
			buf.WriteString(`"is_flexible":true`)
		} else {
			buf.WriteString(`"is_flexible":false`)
		}
		buf.WriteByte(',')
	}
	if mj.NeedEmail != false {
		if mj.NeedEmail {
			buf.WriteString(`"need_email":true`)
		} else {
			buf.WriteString(`"need_email":false`)
		}
		buf.WriteByte(',')
	}
	if mj.NeedName != false {
		if mj.NeedName {
			buf.WriteString(`"need_name":true`)
		} else {
			buf.WriteString(`"need_name":false`)
		}
		buf.WriteByte(',')
	}
	if mj.NeedPhoneNumber != false {
		if mj.NeedPhoneNumber {
			buf.WriteString(`"need_phone_number":true`)
		} else {
			buf.WriteString(`"need_phone_number":false`)
		}
		buf.WriteByte(',')
	}
	if mj.NeedShippingAddress != false {
		if mj.NeedShippingAddress {
			buf.WriteString(`"need_shipping_address":true`)
		} else {
			buf.WriteString(`"need_shipping_address":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Payload != nil {
		buf.WriteString(`"payload":`)
		fflib.WriteJsonString(buf, string(*mj.Payload))
	} else {
		buf.WriteString(`"payload":null`)
	}
	buf.WriteByte(',')
	if mj.PhotoHeight != 0 {
		buf.WriteString(`"photo_height":`)
		fflib.FormatBits2(buf, uint64(mj.PhotoHeight), 10, mj.PhotoHeight < 0)
		buf.WriteByte(',')
	}
	if mj.PhotoSize != 0 {
		buf.WriteString(`"photo_size":`)
		fflib.FormatBits2(buf, uint64(mj.PhotoSize), 10, mj.PhotoSize < 0)
		buf.WriteByte(',')
	}
	if len(mj.PhotoURL) != 0 {
		buf.WriteString(`"photo_url":`)
		fflib.WriteJsonString(buf, string(mj.PhotoURL))
		buf.WriteByte(',')
	}
	if mj.PhotoWidth != 0 {
		buf.WriteString(`"photo_width":`)
		fflib.FormatBits2(buf, uint64(mj.PhotoWidth), 10, mj.PhotoWidth < 0)
		buf.WriteByte(',')
	}
	buf.WriteString(`"prices":`)
	if mj.Prices != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Prices {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				if v == nil {
					buf.WriteString("null")
					return nil
				}

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	if mj.ProviderToken != nil {
		buf.WriteString(`,"provider_token":`)
		fflib.WriteJsonString(buf, string(*mj.ProviderToken))
	} else {
		buf.WriteString(`,"provider_token":null`)
	}
	buf.WriteByte(',')
	if mj.ReplyMarkup != nil {
		buf.WriteString(`"reply_markup":`)
		/* Interface types must use runtime reflection. type=interface {} kind=interface */
		err = buf.Encode(mj.ReplyMarkup)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if mj.ReplyToMessageID != 0 {
		buf.WriteString(`"reply_to_message_id":`)
		fflib.FormatBits2(buf, uint64(mj.ReplyToMessageID), 10, mj.ReplyToMessageID < 0)
		buf.WriteByte(',')
	}
	if mj.StartParameter != nil {
		buf.WriteString(`"start_parameter":`)
		fflib.WriteJsonString(buf, string(*mj.StartParameter))
	} else {
		buf.WriteString(`"start_parameter":null`)
	}
	if mj.Title != nil {
		buf.WriteString(`,"title":`)
		fflib.WriteJsonString(buf, string(*mj.Title))
	} else {
		buf.WriteString(`,"title":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_SendInvoiceBodybase = iota
	ffj_t_SendInvoiceBodyno_such_key

	ffj_t_SendInvoiceBody_ChatID

	ffj_t_SendInvoiceBody_Currency

	ffj_t_SendInvoiceBody_Description

	ffj_t_SendInvoiceBody_DisableNotification

	ffj_t_SendInvoiceBody_IsFlexible

	ffj_t_SendInvoiceBody_NeedEmail

	ffj_t_SendInvoiceBody_NeedName

	ffj_t_SendInvoiceBody_NeedPhoneNumber

	ffj_t_SendInvoiceBody_NeedShippingAddress

	ffj_t_SendInvoiceBody_Payload

	ffj_t_SendInvoiceBody_PhotoHeight

	ffj_t_SendInvoiceBody_PhotoSize

	ffj_t_SendInvoiceBody_PhotoURL

	ffj_t_SendInvoiceBody_PhotoWidth

	ffj_t_SendInvoiceBody_Prices

	ffj_t_SendInvoiceBody_ProviderToken

	ffj_t_SendInvoiceBody_ReplyMarkup

	ffj_t_SendInvoiceBody_ReplyToMessageID

	ffj_t_SendInvoiceBody_StartParameter

	ffj_t_SendInvoiceBody_Title
)

var ffj_key_SendInvoiceBody_ChatID = []byte("chat_id")

var ffj_key_SendInvoiceBody_Currency = []byte("currency")

var ffj_key_SendInvoiceBody_Description = []byte("description")

var ffj_key_SendInvoiceBody_DisableNotification = []byte("disable_notification")

var ffj_key_SendInvoiceBody_IsFlexible = []byte("is_flexible")

var ffj_key_SendInvoiceBody_NeedEmail = []byte("need_email")

var ffj_key_SendInvoiceBody_NeedName = []byte("need_name")

var ffj_key_SendInvoiceBody_NeedPhoneNumber = []byte("need_phone_number")

var ffj_key_SendInvoiceBody_NeedShippingAddress = []byte("need_shipping_address")

var ffj_key_SendInvoiceBody_Payload = []byte("payload")

var ffj_key_SendInvoiceBody_PhotoHeight = []byte("photo_height")

var ffj_key_SendInvoiceBody_PhotoSize = []byte("photo_size")

var ffj_key_SendInvoiceBody_PhotoURL = []byte("photo_url")

var ffj_key_SendInvoiceBody_PhotoWidth = []byte("photo_width")

var ffj_key_SendInvoiceBody_Prices = []byte("prices")

var ffj_key_SendInvoiceBody_ProviderToken = []byte("provider_token")

var ffj_key_SendInvoiceBody_ReplyMarkup = []byte("reply_markup")

var ffj_key_SendInvoiceBody_ReplyToMessageID = []byte("reply_to_message_id")

var ffj_key_SendInvoiceBody_StartParameter = []byte("start_parameter")

var ffj_key_SendInvoiceBody_Title = []byte("title")

func (uj *SendInvoiceBody) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *SendInvoiceBody) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_SendInvoiceBodybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_SendInvoiceBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_SendInvoiceBody_ChatID, kn) {
						currentKey = ffj_t_SendInvoiceBody_ChatID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_Currency, kn) {
						currentKey = ffj_t_SendInvoiceBody_Currency
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'd':

					if bytes.Equal(ffj_key_SendInvoiceBody_Description, kn) {
						currentKey = ffj_t_SendInvoiceBody_Description
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_DisableNotification, kn) {
						currentKey = ffj_t_SendInvoiceBody_DisableNotification
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_SendInvoiceBody_IsFlexible, kn) {
						currentKey = ffj_t_SendInvoiceBody_IsFlexible
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_SendInvoiceBody_NeedEmail, kn) {
						currentKey = ffj_t_SendInvoiceBody_NeedEmail
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_NeedName, kn) {
						currentKey = ffj_t_SendInvoiceBody_NeedName
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_NeedPhoneNumber, kn) {
						currentKey = ffj_t_SendInvoiceBody_NeedPhoneNumber
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_NeedShippingAddress, kn) {
						currentKey = ffj_t_SendInvoiceBody_NeedShippingAddress
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'p':

					if bytes.Equal(ffj_key_SendInvoiceBody_Payload, kn) {
						currentKey = ffj_t_SendInvoiceBody_Payload
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_PhotoHeight, kn) {
						currentKey = ffj_t_SendInvoiceBody_PhotoHeight
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_PhotoSize, kn) {
						currentKey = ffj_t_SendInvoiceBody_PhotoSize
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_PhotoURL, kn) {
						currentKey = ffj_t_SendInvoiceBody_PhotoURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_PhotoWidth, kn) {
						currentKey = ffj_t_SendInvoiceBody_PhotoWidth
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_Prices, kn) {
						currentKey = ffj_t_SendInvoiceBody_Prices
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_ProviderToken, kn) {
						currentKey = ffj_t_SendInvoiceBody_ProviderToken
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_SendInvoiceBody_ReplyMarkup, kn) {
						currentKey = ffj_t_SendInvoiceBody_ReplyMarkup
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_SendInvoiceBody_ReplyToMessageID, kn) {
						currentKey = ffj_t_SendInvoiceBody_ReplyToMessageID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_SendInvoiceBody_StartParameter, kn) {
						currentKey = ffj_t_SendInvoiceBody_StartParameter
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_SendInvoiceBody_Title, kn) {
						currentKey = ffj_t_SendInvoiceBody_Title
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_SendInvoiceBody_Title, kn) {
					currentKey = ffj_t_SendInvoiceBody_Title
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_StartParameter, kn) {
					currentKey = ffj_t_SendInvoiceBody_StartParameter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_ReplyToMessageID, kn) {
					currentKey = ffj_t_SendInvoiceBody_ReplyToMessageID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_ReplyMarkup, kn) {
					currentKey = ffj_t_SendInvoiceBody_ReplyMarkup
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_ProviderToken, kn) {
					currentKey = ffj_t_SendInvoiceBody_ProviderToken
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_Prices, kn) {
					currentKey = ffj_t_SendInvoiceBody_Prices
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_PhotoWidth, kn) {
					currentKey = ffj_t_SendInvoiceBody_PhotoWidth
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_PhotoURL, kn) {
					currentKey = ffj_t_SendInvoiceBody_PhotoURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_PhotoSize, kn) {
					currentKey = ffj_t_SendInvoiceBody_PhotoSize
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_PhotoHeight, kn) {
					currentKey = ffj_t_SendInvoiceBody_PhotoHeight
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_SendInvoiceBody_Payload, kn) {
					currentKey = ffj_t_SendInvoiceBody_Payload
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_NeedShippingAddress, kn) {
					currentKey = ffj_t_SendInvoiceBody_NeedShippingAddress
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_NeedPhoneNumber, kn) {
					currentKey = ffj_t_SendInvoiceBody_NeedPhoneNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_NeedName, kn) {
					currentKey = ffj_t_SendInvoiceBody_NeedName
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_NeedEmail, kn) {
					currentKey = ffj_t_SendInvoiceBody_NeedEmail
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_IsFlexible, kn) {
					currentKey = ffj_t_SendInvoiceBody_IsFlexible
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_DisableNotification, kn) {
					currentKey = ffj_t_SendInvoiceBody_DisableNotification
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_SendInvoiceBody_Description, kn) {
					currentKey = ffj_t_SendInvoiceBody_Description
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_SendInvoiceBody_Currency, kn) {
					currentKey = ffj_t_SendInvoiceBody_Currency
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_SendInvoiceBody_ChatID, kn) {
					currentKey = ffj_t_SendInvoiceBody_ChatID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_SendInvoiceBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_SendInvoiceBody_ChatID:
					goto handle_ChatID

				case ffj_t_SendInvoiceBody_Currency:
					goto handle_Currency

				case ffj_t_SendInvoiceBody_Description:
					goto handle_Description

				case ffj_t_SendInvoiceBody_DisableNotification:
					goto handle_DisableNotification

				case ffj_t_SendInvoiceBody_IsFlexible:
					goto handle_IsFlexible

				case ffj_t_SendInvoiceBody_NeedEmail:
					goto handle_NeedEmail

				case ffj_t_SendInvoiceBody_NeedName:
					goto handle_NeedName

				case ffj_t_SendInvoiceBody_NeedPhoneNumber:
					goto handle_NeedPhoneNumber

				case ffj_t_SendInvoiceBody_NeedShippingAddress:
					goto handle_NeedShippingAddress

				case ffj_t_SendInvoiceBody_Payload:
					goto handle_Payload

				case ffj_t_SendInvoiceBody_PhotoHeight:
					goto handle_PhotoHeight

				case ffj_t_SendInvoiceBody_PhotoSize:
					goto handle_PhotoSize

				case ffj_t_SendInvoiceBody_PhotoURL:
					goto handle_PhotoURL

				case ffj_t_SendInvoiceBody_PhotoWidth:
					goto handle_PhotoWidth

				case ffj_t_SendInvoiceBody_Prices:
					goto handle_Prices

				case ffj_t_SendInvoiceBody_ProviderToken:
					goto handle_ProviderToken

				case ffj_t_SendInvoiceBody_ReplyMarkup:
					goto handle_ReplyMarkup

				case ffj_t_SendInvoiceBody_ReplyToMessageID:
					goto handle_ReplyToMessageID

				case ffj_t_SendInvoiceBody_StartParameter:
					goto handle_StartParameter

				case ffj_t_SendInvoiceBody_Title:
					goto handle_Title

				case ffj_t_SendInvoiceBodyno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ChatID:

	/* handler: uj.ChatID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.ChatID = nil

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := int64(tval)
			uj.ChatID = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Currency:

	/* handler: uj.Currency type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Currency = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Currency = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Description:

	/* handler: uj.Description type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Description = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Description = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_DisableNotification:

	/* handler: uj.DisableNotification type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.DisableNotification = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.DisableNotification = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsFlexible:

	/* handler: uj.IsFlexible type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.IsFlexible = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.IsFlexible = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NeedEmail:

	/* handler: uj.NeedEmail type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.NeedEmail = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.NeedEmail = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NeedName:

	/* handler: uj.NeedName type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.NeedName = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.NeedName = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NeedPhoneNumber:

	/* handler: uj.NeedPhoneNumber type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.NeedPhoneNumber = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.NeedPhoneNumber = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NeedShippingAddress:

	/* handler: uj.NeedShippingAddress type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.NeedShippingAddress = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.NeedShippingAddress = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Payload:

	/* handler: uj.Payload type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Payload = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Payload = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PhotoHeight:

	/* handler: uj.PhotoHeight type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PhotoHeight = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PhotoSize:

	/* handler: uj.PhotoSize type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PhotoSize = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PhotoURL:

	/* handler: uj.PhotoURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.PhotoURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_PhotoWidth:

	/* handler: uj.PhotoWidth type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.PhotoWidth = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Prices:

	/* handler: uj.Prices type=[]*models.LabeledPrice kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Prices = nil
		} else {

			uj.Prices = []*LabeledPrice{}

			wantVal := true

			for {

				var tmp_uj__Prices *LabeledPrice

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Prices type=*models.LabeledPrice kind=ptr quoted=false*/

				{
					if tok == fflib.FFTok_null {

						tmp_uj__Prices = nil

						state = fflib.FFParse_after_value
						goto mainparse
					}

					if tmp_uj__Prices == nil {
						tmp_uj__Prices = new(LabeledPrice)
					}

					err = tmp_uj__Prices.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
					if err != nil {
						return err
					}
					state = fflib.FFParse_after_value
				}

				uj.Prices = append(uj.Prices, tmp_uj__Prices)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ProviderToken:

	/* handler: uj.ProviderToken type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.ProviderToken = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.ProviderToken = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyMarkup:

	/* handler: uj.ReplyMarkup type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.ReplyMarkup)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyToMessageID:

	/* handler: uj.ReplyToMessageID type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ReplyToMessageID = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartParameter:

	/* handler: uj.StartParameter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.StartParameter = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.StartParameter = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Title:

	/* handler: uj.Title type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Title = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Title = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
