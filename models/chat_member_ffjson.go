// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/chat_member.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *ChatMember) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ChatMember) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteByte('{')
	if mj.CanAddWebPagePreviews != false {
		if mj.CanAddWebPagePreviews {
			buf.WriteString(`"can_add_web_page_previews":true`)
		} else {
			buf.WriteString(`"can_add_web_page_previews":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanBeEdited != false {
		if mj.CanBeEdited {
			buf.WriteString(`"can_be_edited":true`)
		} else {
			buf.WriteString(`"can_be_edited":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanChangeInfo != false {
		if mj.CanChangeInfo {
			buf.WriteString(`"can_change_info":true`)
		} else {
			buf.WriteString(`"can_change_info":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanDeleteMessages != false {
		if mj.CanDeleteMessages {
			buf.WriteString(`"can_delete_messages":true`)
		} else {
			buf.WriteString(`"can_delete_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanEditMessages != false {
		if mj.CanEditMessages {
			buf.WriteString(`"can_edit_messages":true`)
		} else {
			buf.WriteString(`"can_edit_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanInviteUsers != false {
		if mj.CanInviteUsers {
			buf.WriteString(`"can_invite_users":true`)
		} else {
			buf.WriteString(`"can_invite_users":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanPinMessages != false {
		if mj.CanPinMessages {
			buf.WriteString(`"can_pin_messages":true`)
		} else {
			buf.WriteString(`"can_pin_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanPostMessages != false {
		if mj.CanPostMessages {
			buf.WriteString(`"can_post_messages":true`)
		} else {
			buf.WriteString(`"can_post_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanPromoteMembers != false {
		if mj.CanPromoteMembers {
			buf.WriteString(`"can_promote_members":true`)
		} else {
			buf.WriteString(`"can_promote_members":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanRestrictMembers != false {
		if mj.CanRestrictMembers {
			buf.WriteString(`"can_restrict_members":true`)
		} else {
			buf.WriteString(`"can_restrict_members":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanSendMediaMessages != false {
		if mj.CanSendMediaMessages {
			buf.WriteString(`"can_send_media_messages":true`)
		} else {
			buf.WriteString(`"can_send_media_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanSendMessages != false {
		if mj.CanSendMessages {
			buf.WriteString(`"can_send_messages":true`)
		} else {
			buf.WriteString(`"can_send_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.CanSendOtherMessages != false {
		if mj.CanSendOtherMessages {
			buf.WriteString(`"can_send_other_messages":true`)
		} else {
			buf.WriteString(`"can_send_other_messages":false`)
		}
		buf.WriteByte(',')
	}
	if mj.Status != nil {
		buf.WriteString(`"status":`)
		fflib.WriteJsonString(buf, string(*mj.Status))
	} else {
		buf.WriteString(`"status":null`)
	}
	buf.WriteByte(',')
	if mj.UntilDate != 0 {
		buf.WriteString(`"until_date":`)
		fflib.FormatBits2(buf, uint64(mj.UntilDate), 10, mj.UntilDate < 0)
		buf.WriteByte(',')
	}
	if mj.User != nil {
		/* Struct fall back. type=models.User kind=struct */
		buf.WriteString(`"user":`)
		err = buf.Encode(mj.User)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`"user":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ChatMemberbase = iota
	ffj_t_ChatMemberno_such_key

	ffj_t_ChatMember_CanAddWebPagePreviews

	ffj_t_ChatMember_CanBeEdited

	ffj_t_ChatMember_CanChangeInfo

	ffj_t_ChatMember_CanDeleteMessages

	ffj_t_ChatMember_CanEditMessages

	ffj_t_ChatMember_CanInviteUsers

	ffj_t_ChatMember_CanPinMessages

	ffj_t_ChatMember_CanPostMessages

	ffj_t_ChatMember_CanPromoteMembers

	ffj_t_ChatMember_CanRestrictMembers

	ffj_t_ChatMember_CanSendMediaMessages

	ffj_t_ChatMember_CanSendMessages

	ffj_t_ChatMember_CanSendOtherMessages

	ffj_t_ChatMember_Status

	ffj_t_ChatMember_UntilDate

	ffj_t_ChatMember_User
)

var ffj_key_ChatMember_CanAddWebPagePreviews = []byte("can_add_web_page_previews")

var ffj_key_ChatMember_CanBeEdited = []byte("can_be_edited")

var ffj_key_ChatMember_CanChangeInfo = []byte("can_change_info")

var ffj_key_ChatMember_CanDeleteMessages = []byte("can_delete_messages")

var ffj_key_ChatMember_CanEditMessages = []byte("can_edit_messages")

var ffj_key_ChatMember_CanInviteUsers = []byte("can_invite_users")

var ffj_key_ChatMember_CanPinMessages = []byte("can_pin_messages")

var ffj_key_ChatMember_CanPostMessages = []byte("can_post_messages")

var ffj_key_ChatMember_CanPromoteMembers = []byte("can_promote_members")

var ffj_key_ChatMember_CanRestrictMembers = []byte("can_restrict_members")

var ffj_key_ChatMember_CanSendMediaMessages = []byte("can_send_media_messages")

var ffj_key_ChatMember_CanSendMessages = []byte("can_send_messages")

var ffj_key_ChatMember_CanSendOtherMessages = []byte("can_send_other_messages")

var ffj_key_ChatMember_Status = []byte("status")

var ffj_key_ChatMember_UntilDate = []byte("until_date")

var ffj_key_ChatMember_User = []byte("user")

func (uj *ChatMember) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ChatMember) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ChatMemberbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ChatMemberno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_ChatMember_CanAddWebPagePreviews, kn) {
						currentKey = ffj_t_ChatMember_CanAddWebPagePreviews
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanBeEdited, kn) {
						currentKey = ffj_t_ChatMember_CanBeEdited
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanChangeInfo, kn) {
						currentKey = ffj_t_ChatMember_CanChangeInfo
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanDeleteMessages, kn) {
						currentKey = ffj_t_ChatMember_CanDeleteMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanEditMessages, kn) {
						currentKey = ffj_t_ChatMember_CanEditMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanInviteUsers, kn) {
						currentKey = ffj_t_ChatMember_CanInviteUsers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanPinMessages, kn) {
						currentKey = ffj_t_ChatMember_CanPinMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanPostMessages, kn) {
						currentKey = ffj_t_ChatMember_CanPostMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanPromoteMembers, kn) {
						currentKey = ffj_t_ChatMember_CanPromoteMembers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanRestrictMembers, kn) {
						currentKey = ffj_t_ChatMember_CanRestrictMembers
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanSendMediaMessages, kn) {
						currentKey = ffj_t_ChatMember_CanSendMediaMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanSendMessages, kn) {
						currentKey = ffj_t_ChatMember_CanSendMessages
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_CanSendOtherMessages, kn) {
						currentKey = ffj_t_ChatMember_CanSendOtherMessages
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_ChatMember_Status, kn) {
						currentKey = ffj_t_ChatMember_Status
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'u':

					if bytes.Equal(ffj_key_ChatMember_UntilDate, kn) {
						currentKey = ffj_t_ChatMember_UntilDate
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_ChatMember_User, kn) {
						currentKey = ffj_t_ChatMember_User
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_User, kn) {
					currentKey = ffj_t_ChatMember_User
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ChatMember_UntilDate, kn) {
					currentKey = ffj_t_ChatMember_UntilDate
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_Status, kn) {
					currentKey = ffj_t_ChatMember_Status
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanSendOtherMessages, kn) {
					currentKey = ffj_t_ChatMember_CanSendOtherMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanSendMessages, kn) {
					currentKey = ffj_t_ChatMember_CanSendMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanSendMediaMessages, kn) {
					currentKey = ffj_t_ChatMember_CanSendMediaMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanRestrictMembers, kn) {
					currentKey = ffj_t_ChatMember_CanRestrictMembers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanPromoteMembers, kn) {
					currentKey = ffj_t_ChatMember_CanPromoteMembers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanPostMessages, kn) {
					currentKey = ffj_t_ChatMember_CanPostMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanPinMessages, kn) {
					currentKey = ffj_t_ChatMember_CanPinMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanInviteUsers, kn) {
					currentKey = ffj_t_ChatMember_CanInviteUsers
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanEditMessages, kn) {
					currentKey = ffj_t_ChatMember_CanEditMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanDeleteMessages, kn) {
					currentKey = ffj_t_ChatMember_CanDeleteMessages
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ChatMember_CanChangeInfo, kn) {
					currentKey = ffj_t_ChatMember_CanChangeInfo
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_ChatMember_CanBeEdited, kn) {
					currentKey = ffj_t_ChatMember_CanBeEdited
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChatMember_CanAddWebPagePreviews, kn) {
					currentKey = ffj_t_ChatMember_CanAddWebPagePreviews
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ChatMemberno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ChatMember_CanAddWebPagePreviews:
					goto handle_CanAddWebPagePreviews

				case ffj_t_ChatMember_CanBeEdited:
					goto handle_CanBeEdited

				case ffj_t_ChatMember_CanChangeInfo:
					goto handle_CanChangeInfo

				case ffj_t_ChatMember_CanDeleteMessages:
					goto handle_CanDeleteMessages

				case ffj_t_ChatMember_CanEditMessages:
					goto handle_CanEditMessages

				case ffj_t_ChatMember_CanInviteUsers:
					goto handle_CanInviteUsers

				case ffj_t_ChatMember_CanPinMessages:
					goto handle_CanPinMessages

				case ffj_t_ChatMember_CanPostMessages:
					goto handle_CanPostMessages

				case ffj_t_ChatMember_CanPromoteMembers:
					goto handle_CanPromoteMembers

				case ffj_t_ChatMember_CanRestrictMembers:
					goto handle_CanRestrictMembers

				case ffj_t_ChatMember_CanSendMediaMessages:
					goto handle_CanSendMediaMessages

				case ffj_t_ChatMember_CanSendMessages:
					goto handle_CanSendMessages

				case ffj_t_ChatMember_CanSendOtherMessages:
					goto handle_CanSendOtherMessages

				case ffj_t_ChatMember_Status:
					goto handle_Status

				case ffj_t_ChatMember_UntilDate:
					goto handle_UntilDate

				case ffj_t_ChatMember_User:
					goto handle_User

				case ffj_t_ChatMemberno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CanAddWebPagePreviews:

	/* handler: uj.CanAddWebPagePreviews type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanAddWebPagePreviews = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanAddWebPagePreviews = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanBeEdited:

	/* handler: uj.CanBeEdited type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanBeEdited = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanBeEdited = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanChangeInfo:

	/* handler: uj.CanChangeInfo type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanChangeInfo = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanChangeInfo = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanDeleteMessages:

	/* handler: uj.CanDeleteMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanDeleteMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanDeleteMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanEditMessages:

	/* handler: uj.CanEditMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanEditMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanEditMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanInviteUsers:

	/* handler: uj.CanInviteUsers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanInviteUsers = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanInviteUsers = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPinMessages:

	/* handler: uj.CanPinMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanPinMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanPinMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPostMessages:

	/* handler: uj.CanPostMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanPostMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanPostMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanPromoteMembers:

	/* handler: uj.CanPromoteMembers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanPromoteMembers = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanPromoteMembers = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanRestrictMembers:

	/* handler: uj.CanRestrictMembers type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanRestrictMembers = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanRestrictMembers = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanSendMediaMessages:

	/* handler: uj.CanSendMediaMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanSendMediaMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanSendMediaMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanSendMessages:

	/* handler: uj.CanSendMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanSendMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanSendMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CanSendOtherMessages:

	/* handler: uj.CanSendOtherMessages type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.CanSendOtherMessages = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.CanSendOtherMessages = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Status:

	/* handler: uj.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Status = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Status = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_UntilDate:

	/* handler: uj.UntilDate type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.UntilDate = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_User:

	/* handler: uj.User type=models.User kind=struct quoted=false*/

	{
		/* Falling back. type=models.User kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.User)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
