// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/chosen_inline_result.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *ChosenInlineResult) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ChosenInlineResult) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.From != nil {
		/* Struct fall back. type=models.User kind=struct */
		buf.WriteString(`{"from":`)
		err = buf.Encode(mj.From)
		if err != nil {
			return err
		}
	} else {
		buf.WriteString(`{"from":null`)
	}
	buf.WriteByte(',')
	if len(mj.InlineMessageID) != 0 {
		buf.WriteString(`"inline_message_id":`)
		fflib.WriteJsonString(buf, string(mj.InlineMessageID))
		buf.WriteByte(',')
	}
	if mj.Location != nil {
		if true {
			/* Struct fall back. type=models.Location kind=struct */
			buf.WriteString(`"location":`)
			err = buf.Encode(mj.Location)
			if err != nil {
				return err
			}
			buf.WriteByte(',')
		}
	}
	if mj.Query != nil {
		buf.WriteString(`"query":`)
		fflib.WriteJsonString(buf, string(*mj.Query))
	} else {
		buf.WriteString(`"query":null`)
	}
	if mj.ResultID != nil {
		buf.WriteString(`,"result_id":`)
		fflib.WriteJsonString(buf, string(*mj.ResultID))
	} else {
		buf.WriteString(`,"result_id":null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_ChosenInlineResultbase = iota
	ffj_t_ChosenInlineResultno_such_key

	ffj_t_ChosenInlineResult_From

	ffj_t_ChosenInlineResult_InlineMessageID

	ffj_t_ChosenInlineResult_Location

	ffj_t_ChosenInlineResult_Query

	ffj_t_ChosenInlineResult_ResultID
)

var ffj_key_ChosenInlineResult_From = []byte("from")

var ffj_key_ChosenInlineResult_InlineMessageID = []byte("inline_message_id")

var ffj_key_ChosenInlineResult_Location = []byte("location")

var ffj_key_ChosenInlineResult_Query = []byte("query")

var ffj_key_ChosenInlineResult_ResultID = []byte("result_id")

func (uj *ChosenInlineResult) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *ChosenInlineResult) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_ChosenInlineResultbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_ChosenInlineResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'f':

					if bytes.Equal(ffj_key_ChosenInlineResult_From, kn) {
						currentKey = ffj_t_ChosenInlineResult_From
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_ChosenInlineResult_InlineMessageID, kn) {
						currentKey = ffj_t_ChosenInlineResult_InlineMessageID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_ChosenInlineResult_Location, kn) {
						currentKey = ffj_t_ChosenInlineResult_Location
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'q':

					if bytes.Equal(ffj_key_ChosenInlineResult_Query, kn) {
						currentKey = ffj_t_ChosenInlineResult_Query
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_ChosenInlineResult_ResultID, kn) {
						currentKey = ffj_t_ChosenInlineResult_ResultID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_ChosenInlineResult_ResultID, kn) {
					currentKey = ffj_t_ChosenInlineResult_ResultID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ChosenInlineResult_Query, kn) {
					currentKey = ffj_t_ChosenInlineResult_Query
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ChosenInlineResult_Location, kn) {
					currentKey = ffj_t_ChosenInlineResult_Location
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_ChosenInlineResult_InlineMessageID, kn) {
					currentKey = ffj_t_ChosenInlineResult_InlineMessageID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_ChosenInlineResult_From, kn) {
					currentKey = ffj_t_ChosenInlineResult_From
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_ChosenInlineResultno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_ChosenInlineResult_From:
					goto handle_From

				case ffj_t_ChosenInlineResult_InlineMessageID:
					goto handle_InlineMessageID

				case ffj_t_ChosenInlineResult_Location:
					goto handle_Location

				case ffj_t_ChosenInlineResult_Query:
					goto handle_Query

				case ffj_t_ChosenInlineResult_ResultID:
					goto handle_ResultID

				case ffj_t_ChosenInlineResultno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_From:

	/* handler: uj.From type=models.User kind=struct quoted=false*/

	{
		/* Falling back. type=models.User kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.From)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InlineMessageID:

	/* handler: uj.InlineMessageID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.InlineMessageID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Location:

	/* handler: uj.Location type=models.Location kind=struct quoted=false*/

	{
		/* Falling back. type=models.Location kind=struct */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.Location)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Query:

	/* handler: uj.Query type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Query = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Query = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ResultID:

	/* handler: uj.ResultID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.ResultID = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.ResultID = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
