// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/answer_inline_query_body.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *AnswerInlineQueryBody) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *AnswerInlineQueryBody) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.CacheTime != 0 {
		buf.WriteString(`"cache_time":`)
		fflib.FormatBits2(buf, uint64(mj.CacheTime), 10, mj.CacheTime < 0)
		buf.WriteByte(',')
	}
	if mj.InlineQueryID != nil {
		buf.WriteString(`"inline_query_id":`)
		fflib.WriteJsonString(buf, string(*mj.InlineQueryID))
	} else {
		buf.WriteString(`"inline_query_id":null`)
	}
	buf.WriteByte(',')
	if mj.IsPersonal != false {
		if mj.IsPersonal {
			buf.WriteString(`"is_personal":true`)
		} else {
			buf.WriteString(`"is_personal":false`)
		}
		buf.WriteByte(',')
	}
	if len(mj.NextOffset) != 0 {
		buf.WriteString(`"next_offset":`)
		fflib.WriteJsonString(buf, string(mj.NextOffset))
		buf.WriteByte(',')
	}
	buf.WriteString(`"results":`)
	if mj.Results != nil {
		buf.WriteString(`[`)
		for i, v := range mj.Results {
			if i != 0 {
				buf.WriteString(`,`)
			}
			/* Interface types must use runtime reflection. type=interface {} kind=interface */
			err = buf.Encode(v)
			if err != nil {
				return err
			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte(',')
	if len(mj.SwitchPmParameter) != 0 {
		buf.WriteString(`"switch_pm_parameter":`)
		fflib.WriteJsonString(buf, string(mj.SwitchPmParameter))
		buf.WriteByte(',')
	}
	if len(mj.SwitchPmText) != 0 {
		buf.WriteString(`"switch_pm_text":`)
		fflib.WriteJsonString(buf, string(mj.SwitchPmText))
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_AnswerInlineQueryBodybase = iota
	ffj_t_AnswerInlineQueryBodyno_such_key

	ffj_t_AnswerInlineQueryBody_CacheTime

	ffj_t_AnswerInlineQueryBody_InlineQueryID

	ffj_t_AnswerInlineQueryBody_IsPersonal

	ffj_t_AnswerInlineQueryBody_NextOffset

	ffj_t_AnswerInlineQueryBody_Results

	ffj_t_AnswerInlineQueryBody_SwitchPmParameter

	ffj_t_AnswerInlineQueryBody_SwitchPmText
)

var ffj_key_AnswerInlineQueryBody_CacheTime = []byte("cache_time")

var ffj_key_AnswerInlineQueryBody_InlineQueryID = []byte("inline_query_id")

var ffj_key_AnswerInlineQueryBody_IsPersonal = []byte("is_personal")

var ffj_key_AnswerInlineQueryBody_NextOffset = []byte("next_offset")

var ffj_key_AnswerInlineQueryBody_Results = []byte("results")

var ffj_key_AnswerInlineQueryBody_SwitchPmParameter = []byte("switch_pm_parameter")

var ffj_key_AnswerInlineQueryBody_SwitchPmText = []byte("switch_pm_text")

func (uj *AnswerInlineQueryBody) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *AnswerInlineQueryBody) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_AnswerInlineQueryBodybase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_AnswerInlineQueryBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'c':

					if bytes.Equal(ffj_key_AnswerInlineQueryBody_CacheTime, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_CacheTime
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_AnswerInlineQueryBody_InlineQueryID, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_InlineQueryID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AnswerInlineQueryBody_IsPersonal, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_IsPersonal
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'n':

					if bytes.Equal(ffj_key_AnswerInlineQueryBody_NextOffset, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_NextOffset
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_AnswerInlineQueryBody_Results, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_Results
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 's':

					if bytes.Equal(ffj_key_AnswerInlineQueryBody_SwitchPmParameter, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_SwitchPmParameter
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_AnswerInlineQueryBody_SwitchPmText, kn) {
						currentKey = ffj_t_AnswerInlineQueryBody_SwitchPmText
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffj_key_AnswerInlineQueryBody_SwitchPmText, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_SwitchPmText
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AnswerInlineQueryBody_SwitchPmParameter, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_SwitchPmParameter
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AnswerInlineQueryBody_Results, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_Results
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AnswerInlineQueryBody_NextOffset, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_NextOffset
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_AnswerInlineQueryBody_IsPersonal, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_IsPersonal
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_AnswerInlineQueryBody_InlineQueryID, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_InlineQueryID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_AnswerInlineQueryBody_CacheTime, kn) {
					currentKey = ffj_t_AnswerInlineQueryBody_CacheTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_AnswerInlineQueryBodyno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_AnswerInlineQueryBody_CacheTime:
					goto handle_CacheTime

				case ffj_t_AnswerInlineQueryBody_InlineQueryID:
					goto handle_InlineQueryID

				case ffj_t_AnswerInlineQueryBody_IsPersonal:
					goto handle_IsPersonal

				case ffj_t_AnswerInlineQueryBody_NextOffset:
					goto handle_NextOffset

				case ffj_t_AnswerInlineQueryBody_Results:
					goto handle_Results

				case ffj_t_AnswerInlineQueryBody_SwitchPmParameter:
					goto handle_SwitchPmParameter

				case ffj_t_AnswerInlineQueryBody_SwitchPmText:
					goto handle_SwitchPmText

				case ffj_t_AnswerInlineQueryBodyno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CacheTime:

	/* handler: uj.CacheTime type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.CacheTime = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InlineQueryID:

	/* handler: uj.InlineQueryID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.InlineQueryID = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.InlineQueryID = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_IsPersonal:

	/* handler: uj.IsPersonal type=bool kind=bool quoted=false*/

	{
		if tok != fflib.FFTok_bool && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for bool", tok))
		}
	}

	{
		if tok == fflib.FFTok_null {

		} else {
			tmpb := fs.Output.Bytes()

			if bytes.Compare([]byte{'t', 'r', 'u', 'e'}, tmpb) == 0 {

				uj.IsPersonal = true

			} else if bytes.Compare([]byte{'f', 'a', 'l', 's', 'e'}, tmpb) == 0 {

				uj.IsPersonal = false

			} else {
				err = errors.New("unexpected bytes for true/false value")
				return fs.WrapErr(err)
			}

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_NextOffset:

	/* handler: uj.NextOffset type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.NextOffset = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Results:

	/* handler: uj.Results type=[]interface {} kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			uj.Results = nil
		} else {

			uj.Results = []interface{}{}

			wantVal := true

			for {

				var tmp_uj__Results interface{}

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmp_uj__Results type=interface {} kind=interface quoted=false*/

				{
					/* Falling back. type=interface {} kind=interface */
					tbuf, err := fs.CaptureField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}

					err = json.Unmarshal(tbuf, &tmp_uj__Results)
					if err != nil {
						return fs.WrapErr(err)
					}
				}

				uj.Results = append(uj.Results, tmp_uj__Results)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchPmParameter:

	/* handler: uj.SwitchPmParameter type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SwitchPmParameter = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_SwitchPmText:

	/* handler: uj.SwitchPmText type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.SwitchPmText = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
