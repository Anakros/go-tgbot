package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InlineQueryResultCachedSticker inline query result cached sticker
// swagger:model InlineQueryResultCachedSticker
type InlineQueryResultCachedSticker struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// input message content
	InputMessageContent interface{} `json:"input_message_content,omitempty"`

	// reply markup
	ReplyMarkup *InlineKeyboardMarkup `json:"reply_markup,omitempty"`

	// sticker file id
	// Required: true
	StickerFileID *string `json:"sticker_file_id"`

	// type
	// Required: true
	Type InlineType `json:"type"`
}

// Validate validates this inline query result cached sticker
func (m *InlineQueryResultCachedSticker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateReplyMarkup(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStickerFileID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InlineQueryResultCachedSticker) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *InlineQueryResultCachedSticker) validateReplyMarkup(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplyMarkup) { // not required
		return nil
	}

	if m.ReplyMarkup != nil {

		if err := m.ReplyMarkup.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *InlineQueryResultCachedSticker) validateStickerFileID(formats strfmt.Registry) error {

	if err := validate.Required("sticker_file_id", "body", m.StickerFileID); err != nil {
		return err
	}

	return nil
}

func (m *InlineQueryResultCachedSticker) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		return err
	}

	return nil
}
