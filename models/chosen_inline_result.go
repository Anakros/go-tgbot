package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ChosenInlineResult chosen inline result
// swagger:model ChosenInlineResult
type ChosenInlineResult struct {

	// from
	// Required: true
	From *User `json:"from"`

	// inline message id
	InlineMessageID string `json:"inline_message_id,omitempty"`

	// location
	Location *Location `json:"location,omitempty"`

	// query
	// Required: true
	Query *string `json:"query"`

	// result id
	// Required: true
	ResultID *string `json:"result_id"`
}

// Validate validates this chosen inline result
func (m *ChosenInlineResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrom(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateResultID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChosenInlineResult) validateFrom(formats strfmt.Registry) error {

	if err := validate.Required("from", "body", m.From); err != nil {
		return err
	}

	if m.From != nil {

		if err := m.From.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ChosenInlineResult) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {

		if err := m.Location.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}

func (m *ChosenInlineResult) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

func (m *ChosenInlineResult) validateResultID(formats strfmt.Registry) error {

	if err := validate.Required("result_id", "body", m.ResultID); err != nil {
		return err
	}

	return nil
}
