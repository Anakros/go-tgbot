package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// InputTextMessageContent input text message content
// swagger:model InputTextMessageContent
type InputTextMessageContent struct {

	// disable web page preview
	DisableWebPagePreview bool `json:"disable_web_page_preview,omitempty"`

	// message text
	// Required: true
	MessageText *string `json:"message_text"`

	// parse mode
	ParseMode string `json:"parse_mode,omitempty"`
}

// Validate validates this input text message content
func (m *InputTextMessageContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMessageText(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParseMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputTextMessageContent) validateMessageText(formats strfmt.Registry) error {

	if err := validate.Required("message_text", "body", m.MessageText); err != nil {
		return err
	}

	return nil
}

var inputTextMessageContentTypeParseModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Markdown","HTML"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inputTextMessageContentTypeParseModePropEnum = append(inputTextMessageContentTypeParseModePropEnum, v)
	}
}

const (
	// InputTextMessageContentParseModeMarkdown captures enum value "Markdown"
	InputTextMessageContentParseModeMarkdown string = "Markdown"
	// InputTextMessageContentParseModeHTML captures enum value "HTML"
	InputTextMessageContentParseModeHTML string = "HTML"
)

// prop value enum
func (m *InputTextMessageContent) validateParseModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, inputTextMessageContentTypeParseModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InputTextMessageContent) validateParseMode(formats strfmt.Registry) error {

	if swag.IsZero(m.ParseMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateParseModeEnum("parse_mode", "body", m.ParseMode); err != nil {
		return err
	}

	return nil
}
