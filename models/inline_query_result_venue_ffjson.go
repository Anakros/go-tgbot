// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: models/inline_query_result_venue.go
// DO NOT EDIT!

package models

import (
	"bytes"
	"encoding/json"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *InlineQueryResultVenue) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	if mj.Address != nil {
		buf.WriteString(`{"address":`)
		fflib.WriteJsonString(buf, string(*mj.Address))
	} else {
		buf.WriteString(`{"address":null`)
	}
	buf.WriteByte(',')
	if len(mj.FoursquareID) != 0 {
		buf.WriteString(`"foursquare_id":`)
		fflib.WriteJsonString(buf, string(mj.FoursquareID))
		buf.WriteByte(',')
	}
	if mj.ID != nil {
		buf.WriteString(`"id":`)
		fflib.WriteJsonString(buf, string(*mj.ID))
	} else {
		buf.WriteString(`"id":null`)
	}
	buf.WriteByte(',')
	if mj.InputMessageContent != nil {
		buf.WriteString(`"input_message_content":`)
		/* Interface types must use runtime reflection. type=interface {} kind=interface */
		err = buf.Encode(mj.InputMessageContent)
		if err != nil {
			return err
		}
		buf.WriteByte(',')
	}
	if mj.Latitude != nil {
		buf.WriteString(`"latitude":`)
		fflib.AppendFloat(buf, float64(*mj.Latitude), 'g', -1, 64)
	} else {
		buf.WriteString(`"latitude":null`)
	}
	if mj.Longitude != nil {
		buf.WriteString(`,"longitude":`)
		fflib.AppendFloat(buf, float64(*mj.Longitude), 'g', -1, 64)
	} else {
		buf.WriteString(`,"longitude":null`)
	}
	buf.WriteByte(',')
	if mj.ReplyMarkup != nil {
		if true {
			buf.WriteString(`"reply_markup":`)

			{

				err = mj.ReplyMarkup.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.ThumbHeight != 0 {
		buf.WriteString(`"thumb_height":`)
		fflib.FormatBits2(buf, uint64(mj.ThumbHeight), 10, mj.ThumbHeight < 0)
		buf.WriteByte(',')
	}
	if len(mj.ThumbURL) != 0 {
		buf.WriteString(`"thumb_url":`)
		fflib.WriteJsonString(buf, string(mj.ThumbURL))
		buf.WriteByte(',')
	}
	if mj.ThumbWidth != 0 {
		buf.WriteString(`"thumb_width":`)
		fflib.FormatBits2(buf, uint64(mj.ThumbWidth), 10, mj.ThumbWidth < 0)
		buf.WriteByte(',')
	}
	if mj.Title != nil {
		buf.WriteString(`"title":`)
		fflib.WriteJsonString(buf, string(*mj.Title))
	} else {
		buf.WriteString(`"title":null`)
	}
	buf.WriteString(`,"type":`)
	fflib.WriteJsonString(buf, string(mj.Type))
	buf.WriteByte('}')
	return nil
}

const (
	ffj_t_InlineQueryResultVenuebase = iota
	ffj_t_InlineQueryResultVenueno_such_key

	ffj_t_InlineQueryResultVenue_Address

	ffj_t_InlineQueryResultVenue_FoursquareID

	ffj_t_InlineQueryResultVenue_ID

	ffj_t_InlineQueryResultVenue_InputMessageContent

	ffj_t_InlineQueryResultVenue_Latitude

	ffj_t_InlineQueryResultVenue_Longitude

	ffj_t_InlineQueryResultVenue_ReplyMarkup

	ffj_t_InlineQueryResultVenue_ThumbHeight

	ffj_t_InlineQueryResultVenue_ThumbURL

	ffj_t_InlineQueryResultVenue_ThumbWidth

	ffj_t_InlineQueryResultVenue_Title

	ffj_t_InlineQueryResultVenue_Type
)

var ffj_key_InlineQueryResultVenue_Address = []byte("address")

var ffj_key_InlineQueryResultVenue_FoursquareID = []byte("foursquare_id")

var ffj_key_InlineQueryResultVenue_ID = []byte("id")

var ffj_key_InlineQueryResultVenue_InputMessageContent = []byte("input_message_content")

var ffj_key_InlineQueryResultVenue_Latitude = []byte("latitude")

var ffj_key_InlineQueryResultVenue_Longitude = []byte("longitude")

var ffj_key_InlineQueryResultVenue_ReplyMarkup = []byte("reply_markup")

var ffj_key_InlineQueryResultVenue_ThumbHeight = []byte("thumb_height")

var ffj_key_InlineQueryResultVenue_ThumbURL = []byte("thumb_url")

var ffj_key_InlineQueryResultVenue_ThumbWidth = []byte("thumb_width")

var ffj_key_InlineQueryResultVenue_Title = []byte("title")

var ffj_key_InlineQueryResultVenue_Type = []byte("type")

func (uj *InlineQueryResultVenue) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return uj.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

func (uj *InlineQueryResultVenue) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error = nil
	currentKey := ffj_t_InlineQueryResultVenuebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffj_t_InlineQueryResultVenueno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'a':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_Address, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_Address
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'f':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_FoursquareID, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_FoursquareID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'i':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_ID, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_ID
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_InputMessageContent, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_InputMessageContent
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'l':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_Latitude, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_Latitude
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_Longitude, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_Longitude
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'r':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_ReplyMarkup, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_ReplyMarkup
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 't':

					if bytes.Equal(ffj_key_InlineQueryResultVenue_ThumbHeight, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_ThumbHeight
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_ThumbURL, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_ThumbURL
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_ThumbWidth, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_ThumbWidth
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_Title, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_Title
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffj_key_InlineQueryResultVenue_Type, kn) {
						currentKey = ffj_t_InlineQueryResultVenue_Type
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineQueryResultVenue_Type, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_Type
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineQueryResultVenue_Title, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_Title
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_InlineQueryResultVenue_ThumbWidth, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_ThumbWidth
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_InlineQueryResultVenue_ThumbURL, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_ThumbURL
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.AsciiEqualFold(ffj_key_InlineQueryResultVenue_ThumbHeight, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_ThumbHeight
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineQueryResultVenue_ReplyMarkup, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_ReplyMarkup
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineQueryResultVenue_Longitude, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_Longitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineQueryResultVenue_Latitude, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_Latitude
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineQueryResultVenue_InputMessageContent, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_InputMessageContent
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffj_key_InlineQueryResultVenue_ID, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_ID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineQueryResultVenue_FoursquareID, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_FoursquareID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffj_key_InlineQueryResultVenue_Address, kn) {
					currentKey = ffj_t_InlineQueryResultVenue_Address
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffj_t_InlineQueryResultVenueno_such_key
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffj_t_InlineQueryResultVenue_Address:
					goto handle_Address

				case ffj_t_InlineQueryResultVenue_FoursquareID:
					goto handle_FoursquareID

				case ffj_t_InlineQueryResultVenue_ID:
					goto handle_ID

				case ffj_t_InlineQueryResultVenue_InputMessageContent:
					goto handle_InputMessageContent

				case ffj_t_InlineQueryResultVenue_Latitude:
					goto handle_Latitude

				case ffj_t_InlineQueryResultVenue_Longitude:
					goto handle_Longitude

				case ffj_t_InlineQueryResultVenue_ReplyMarkup:
					goto handle_ReplyMarkup

				case ffj_t_InlineQueryResultVenue_ThumbHeight:
					goto handle_ThumbHeight

				case ffj_t_InlineQueryResultVenue_ThumbURL:
					goto handle_ThumbURL

				case ffj_t_InlineQueryResultVenue_ThumbWidth:
					goto handle_ThumbWidth

				case ffj_t_InlineQueryResultVenue_Title:
					goto handle_Title

				case ffj_t_InlineQueryResultVenue_Type:
					goto handle_Type

				case ffj_t_InlineQueryResultVenueno_such_key:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Address:

	/* handler: uj.Address type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Address = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Address = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FoursquareID:

	/* handler: uj.FoursquareID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.FoursquareID = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ID:

	/* handler: uj.ID type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.ID = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.ID = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_InputMessageContent:

	/* handler: uj.InputMessageContent type=interface {} kind=interface quoted=false*/

	{
		/* Falling back. type=interface {} kind=interface */
		tbuf, err := fs.CaptureField(tok)
		if err != nil {
			return fs.WrapErr(err)
		}

		err = json.Unmarshal(tbuf, &uj.InputMessageContent)
		if err != nil {
			return fs.WrapErr(err)
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Latitude:

	/* handler: uj.Latitude type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Latitude = nil

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := float64(tval)
			uj.Latitude = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Longitude:

	/* handler: uj.Longitude type=float64 kind=float64 quoted=false*/

	{
		if tok != fflib.FFTok_double && tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for float64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

			uj.Longitude = nil

		} else {

			tval, err := fflib.ParseFloat(fs.Output.Bytes(), 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			ttypval := float64(tval)
			uj.Longitude = &ttypval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ReplyMarkup:

	/* handler: uj.ReplyMarkup type=models.InlineKeyboardMarkup kind=struct quoted=false*/

	{
		if tok == fflib.FFTok_null {

			uj.ReplyMarkup = nil

			state = fflib.FFParse_after_value
			goto mainparse
		}

		if uj.ReplyMarkup == nil {
			uj.ReplyMarkup = new(InlineKeyboardMarkup)
		}

		err = uj.ReplyMarkup.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
		if err != nil {
			return err
		}
		state = fflib.FFParse_after_value
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ThumbHeight:

	/* handler: uj.ThumbHeight type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ThumbHeight = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ThumbURL:

	/* handler: uj.ThumbURL type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.ThumbURL = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_ThumbWidth:

	/* handler: uj.ThumbWidth type=int64 kind=int64 quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int64", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			uj.ThumbWidth = int64(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Title:

	/* handler: uj.Title type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

			uj.Title = nil

		} else {

			var tval string
			outBuf := fs.Output.Bytes()

			tval = string(string(outBuf))
			uj.Title = &tval

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Type:

	/* handler: uj.Type type=models.InlineType kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for InlineType", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			uj.Type = InlineType(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:
	return nil
}
