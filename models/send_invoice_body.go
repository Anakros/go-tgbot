// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SendInvoiceBody send invoice body
// swagger:model SendInvoiceBody

type SendInvoiceBody struct {

	// chat id
	// Required: true
	ChatID *int64 `json:"chat_id"`

	// currency
	// Required: true
	Currency *string `json:"currency"`

	// description
	// Required: true
	Description *string `json:"description"`

	// disable notification
	DisableNotification bool `json:"disable_notification,omitempty"`

	// is flexible
	IsFlexible bool `json:"is_flexible,omitempty"`

	// need email
	NeedEmail bool `json:"need_email,omitempty"`

	// need name
	NeedName bool `json:"need_name,omitempty"`

	// need phone number
	NeedPhoneNumber bool `json:"need_phone_number,omitempty"`

	// need shipping address
	NeedShippingAddress bool `json:"need_shipping_address,omitempty"`

	// payload
	// Required: true
	Payload *string `json:"payload"`

	// photo height
	PhotoHeight int64 `json:"photo_height,omitempty"`

	// photo size
	PhotoSize int64 `json:"photo_size,omitempty"`

	// photo url
	PhotoURL string `json:"photo_url,omitempty"`

	// photo width
	PhotoWidth int64 `json:"photo_width,omitempty"`

	// prices
	// Required: true
	Prices []*LabeledPrice `json:"prices"`

	// provider data
	ProviderData string `json:"provider_data,omitempty"`

	// provider token
	// Required: true
	ProviderToken *string `json:"provider_token"`

	// reply markup
	ReplyMarkup interface{} `json:"reply_markup,omitempty"`

	// reply to message id
	ReplyToMessageID int64 `json:"reply_to_message_id,omitempty"`

	// start parameter
	// Required: true
	StartParameter *string `json:"start_parameter"`

	// title
	// Required: true
	Title *string `json:"title"`
}

/* polymorph SendInvoiceBody chat_id false */

/* polymorph SendInvoiceBody currency false */

/* polymorph SendInvoiceBody description false */

/* polymorph SendInvoiceBody disable_notification false */

/* polymorph SendInvoiceBody is_flexible false */

/* polymorph SendInvoiceBody need_email false */

/* polymorph SendInvoiceBody need_name false */

/* polymorph SendInvoiceBody need_phone_number false */

/* polymorph SendInvoiceBody need_shipping_address false */

/* polymorph SendInvoiceBody payload false */

/* polymorph SendInvoiceBody photo_height false */

/* polymorph SendInvoiceBody photo_size false */

/* polymorph SendInvoiceBody photo_url false */

/* polymorph SendInvoiceBody photo_width false */

/* polymorph SendInvoiceBody prices false */

/* polymorph SendInvoiceBody provider_data false */

/* polymorph SendInvoiceBody provider_token false */

/* polymorph SendInvoiceBody reply_markup false */

/* polymorph SendInvoiceBody reply_to_message_id false */

/* polymorph SendInvoiceBody start_parameter false */

/* polymorph SendInvoiceBody title false */

// Validate validates this send invoice body
func (m *SendInvoiceBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChatID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderToken(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStartParameter(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SendInvoiceBody) validateChatID(formats strfmt.Registry) error {

	if err := validate.Required("chat_id", "body", m.ChatID); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validateCurrency(formats strfmt.Registry) error {

	if err := validate.Required("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validatePayload(formats strfmt.Registry) error {

	if err := validate.Required("payload", "body", m.Payload); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validatePrices(formats strfmt.Registry) error {

	if err := validate.Required("prices", "body", m.Prices); err != nil {
		return err
	}

	for i := 0; i < len(m.Prices); i++ {

		if swag.IsZero(m.Prices[i]) { // not required
			continue
		}

		if m.Prices[i] != nil {

			if err := m.Prices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SendInvoiceBody) validateProviderToken(formats strfmt.Registry) error {

	if err := validate.Required("provider_token", "body", m.ProviderToken); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validateStartParameter(formats strfmt.Registry) error {

	if err := validate.Required("start_parameter", "body", m.StartParameter); err != nil {
		return err
	}

	return nil
}

func (m *SendInvoiceBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SendInvoiceBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SendInvoiceBody) UnmarshalBinary(b []byte) error {
	var res SendInvoiceBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
