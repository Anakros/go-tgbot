package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// ChatMember chat member
// swagger:model ChatMember
type ChatMember struct {

	// status
	Status string `json:"status,omitempty"`

	// user
	User *User `json:"user,omitempty"`
}

// Validate validates this chat member
func (m *ChatMember) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var chatMemberTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["administrator","member","left","kicked"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chatMemberTypeStatusPropEnum = append(chatMemberTypeStatusPropEnum, v)
	}
}

const (
	// ChatMemberStatusAdministrator captures enum value "administrator"
	ChatMemberStatusAdministrator string = "administrator"
	// ChatMemberStatusMember captures enum value "member"
	ChatMemberStatusMember string = "member"
	// ChatMemberStatusLeft captures enum value "left"
	ChatMemberStatusLeft string = "left"
	// ChatMemberStatusKicked captures enum value "kicked"
	ChatMemberStatusKicked string = "kicked"
)

// prop value enum
func (m *ChatMember) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, chatMemberTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ChatMember) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ChatMember) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {

		if err := m.User.Validate(formats); err != nil {
			return err
		}
	}

	return nil
}
