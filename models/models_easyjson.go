// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(in *jlexer.Lexer, out *WebhookInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allowed_updates":
			if in.IsNull() {
				in.Skip()
				out.AllowedUpdates = nil
			} else {
				in.Delim('[')
				if out.AllowedUpdates == nil {
					if !in.IsDelim(']') {
						out.AllowedUpdates = make([]AllowedUpdate, 0, 4)
					} else {
						out.AllowedUpdates = []AllowedUpdate{}
					}
				} else {
					out.AllowedUpdates = (out.AllowedUpdates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AllowedUpdate
					v1 = AllowedUpdate(in.String())
					out.AllowedUpdates = append(out.AllowedUpdates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "has_custom_certificate":
			if in.IsNull() {
				in.Skip()
				out.HasCustomCertificate = nil
			} else {
				if out.HasCustomCertificate == nil {
					out.HasCustomCertificate = new(bool)
				}
				*out.HasCustomCertificate = bool(in.Bool())
			}
		case "last_error_date":
			out.LastErrorDate = int64(in.Int64())
		case "last_error_message":
			out.LastErrorMessage = string(in.String())
		case "max_connections":
			out.MaxConnections = int64(in.Int64())
		case "pending_update_count":
			if in.IsNull() {
				in.Skip()
				out.PendingUpdateCount = nil
			} else {
				if out.PendingUpdateCount == nil {
					out.PendingUpdateCount = new(int64)
				}
				*out.PendingUpdateCount = int64(in.Int64())
			}
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(out *jwriter.Writer, in WebhookInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"allowed_updates\":")
	if in.AllowedUpdates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in.AllowedUpdates {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"has_custom_certificate\":")
	if in.HasCustomCertificate == nil {
		out.RawString("null")
	} else {
		out.Bool(bool(*in.HasCustomCertificate))
	}
	if in.LastErrorDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_error_date\":")
		out.Int64(int64(in.LastErrorDate))
	}
	if in.LastErrorMessage != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_error_message\":")
		out.String(string(in.LastErrorMessage))
	}
	if in.MaxConnections != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"max_connections\":")
		out.Int64(int64(in.MaxConnections))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"pending_update_count\":")
	if in.PendingUpdateCount == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.PendingUpdateCount))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"url\":")
	if in.URL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WebhookInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WebhookInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WebhookInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WebhookInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(in *jlexer.Lexer, out *Voice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(out *jwriter.Writer, in Voice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mime_type\":")
		out.String(string(in.MimeType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Voice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Voice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Voice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Voice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels1(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(in *jlexer.Lexer, out *VideoNote) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Thumb).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(out *jwriter.Writer, in VideoNote) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.Length != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"length\":")
		out.Int64(int64(in.Length))
	}
	if in.Thumb != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb\":")
		if in.Thumb == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Thumb).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VideoNote) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VideoNote) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VideoNote) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VideoNote) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels2(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(in *jlexer.Lexer, out *Video) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Thumb).UnmarshalJSON(data))
				}
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(out *jwriter.Writer, in Video) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"height\":")
		out.Int64(int64(in.Height))
	}
	if in.MimeType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mime_type\":")
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb\":")
		if in.Thumb == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Thumb).MarshalJSON())
		}
	}
	if in.Width != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"width\":")
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Video) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Video) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Video) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Video) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels3(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(in *jlexer.Lexer, out *Venue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			out.Address = string(in.String())
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Location).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(out *jwriter.Writer, in Venue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Address != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"address\":")
		out.String(string(in.Address))
	}
	if in.FoursquareID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"foursquare_id\":")
		out.String(string(in.FoursquareID))
	}
	if in.Location != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"location\":")
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Location).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Venue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Venue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Venue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Venue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels4(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(in *jlexer.Lexer, out *UserProfilePhotos) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "photos":
			if in.IsNull() {
				in.Skip()
				out.Photos = nil
			} else {
				in.Delim('[')
				if out.Photos == nil {
					if !in.IsDelim(']') {
						out.Photos = make([][]*PhotoSize, 0, 2)
					} else {
						out.Photos = [][]*PhotoSize{}
					}
				} else {
					out.Photos = (out.Photos)[:0]
				}
				for !in.IsDelim(']') {
					var v4 []*PhotoSize
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]*PhotoSize, 0, 8)
							} else {
								v4 = []*PhotoSize{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 *PhotoSize
							if in.IsNull() {
								in.Skip()
								v5 = nil
							} else {
								if v5 == nil {
									v5 = new(PhotoSize)
								}
								if data := in.Raw(); in.Ok() {
									in.AddError((*v5).UnmarshalJSON(data))
								}
							}
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Photos = append(out.Photos, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_count":
			out.TotalCount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(out *jwriter.Writer, in UserProfilePhotos) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photos\":")
	if in.Photos == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in.Photos {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v8, v9 := range v7 {
					if v8 > 0 {
						out.RawByte(',')
					}
					if v9 == nil {
						out.RawString("null")
					} else {
						out.Raw((*v9).MarshalJSON())
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
	if in.TotalCount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"total_count\":")
		out.Int64(int64(in.TotalCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfilePhotos) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfilePhotos) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfilePhotos) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfilePhotos) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels5(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "is_bot":
			out.IsBot = bool(in.Bool())
		case "language_code":
			out.LanguageCode = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"first_name\":")
		out.String(string(in.FirstName))
	}
	if in.ID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.Int64(int64(in.ID))
	}
	if in.IsBot {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_bot\":")
		out.Bool(bool(in.IsBot))
	}
	if in.LanguageCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"language_code\":")
		out.String(string(in.LanguageCode))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if in.Username != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"username\":")
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels6(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(in *jlexer.Lexer, out *Update) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "callback_query":
			if in.IsNull() {
				in.Skip()
				out.CallbackQuery = nil
			} else {
				if out.CallbackQuery == nil {
					out.CallbackQuery = new(CallbackQuery)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.CallbackQuery).UnmarshalJSON(data))
				}
			}
		case "channel_post":
			if in.IsNull() {
				in.Skip()
				out.ChannelPost = nil
			} else {
				if out.ChannelPost == nil {
					out.ChannelPost = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChannelPost).UnmarshalJSON(data))
				}
			}
		case "chosen_inline_result":
			if in.IsNull() {
				in.Skip()
				out.ChosenInlineResult = nil
			} else {
				if out.ChosenInlineResult == nil {
					out.ChosenInlineResult = new(ChosenInlineResult)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ChosenInlineResult).UnmarshalJSON(data))
				}
			}
		case "edited_channel_post":
			if in.IsNull() {
				in.Skip()
				out.EditedChannelPost = nil
			} else {
				if out.EditedChannelPost == nil {
					out.EditedChannelPost = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EditedChannelPost).UnmarshalJSON(data))
				}
			}
		case "edited_message":
			if in.IsNull() {
				in.Skip()
				out.EditedMessage = nil
			} else {
				if out.EditedMessage == nil {
					out.EditedMessage = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.EditedMessage).UnmarshalJSON(data))
				}
			}
		case "inline_query":
			if in.IsNull() {
				in.Skip()
				out.InlineQuery = nil
			} else {
				if out.InlineQuery == nil {
					out.InlineQuery = new(InlineQuery)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.InlineQuery).UnmarshalJSON(data))
				}
			}
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Message).UnmarshalJSON(data))
				}
			}
		case "pre_checkout_query":
			if in.IsNull() {
				in.Skip()
				out.PreCheckoutQuery = nil
			} else {
				if out.PreCheckoutQuery == nil {
					out.PreCheckoutQuery = new(PreCheckoutQuery)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PreCheckoutQuery).UnmarshalJSON(data))
				}
			}
		case "shipping_query":
			if in.IsNull() {
				in.Skip()
				out.ShippingQuery = nil
			} else {
				if out.ShippingQuery == nil {
					out.ShippingQuery = new(ShippingQuery)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShippingQuery).UnmarshalJSON(data))
				}
			}
		case "update_id":
			out.UpdateID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(out *jwriter.Writer, in Update) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CallbackQuery != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"callback_query\":")
		if in.CallbackQuery == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.CallbackQuery).MarshalJSON())
		}
	}
	if in.ChannelPost != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"channel_post\":")
		if in.ChannelPost == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChannelPost).MarshalJSON())
		}
	}
	if in.ChosenInlineResult != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chosen_inline_result\":")
		if in.ChosenInlineResult == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ChosenInlineResult).MarshalJSON())
		}
	}
	if in.EditedChannelPost != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"edited_channel_post\":")
		if in.EditedChannelPost == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EditedChannelPost).MarshalJSON())
		}
	}
	if in.EditedMessage != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"edited_message\":")
		if in.EditedMessage == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.EditedMessage).MarshalJSON())
		}
	}
	if in.InlineQuery != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_query\":")
		if in.InlineQuery == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.InlineQuery).MarshalJSON())
		}
	}
	if in.Message != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message\":")
		if in.Message == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Message).MarshalJSON())
		}
	}
	if in.PreCheckoutQuery != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pre_checkout_query\":")
		if in.PreCheckoutQuery == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PreCheckoutQuery).MarshalJSON())
		}
	}
	if in.ShippingQuery != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shipping_query\":")
		if in.ShippingQuery == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShippingQuery).MarshalJSON())
		}
	}
	if in.UpdateID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"update_id\":")
		out.Int64(int64(in.UpdateID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Update) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Update) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Update) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Update) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels7(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(in *jlexer.Lexer, out *SuccessfulPayment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "order_info":
			if in.IsNull() {
				in.Skip()
				out.OrderInfo = nil
			} else {
				if out.OrderInfo == nil {
					out.OrderInfo = new(OrderInfo)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OrderInfo).UnmarshalJSON(data))
				}
			}
		case "provider_payment_charge_id":
			out.ProviderPaymentChargeID = string(in.String())
		case "shipping_option_id":
			out.ShippingOptionID = string(in.String())
		case "telegram_payment_charge_id":
			out.TelegramPaymentChargeID = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(out *jwriter.Writer, in SuccessfulPayment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"currency\":")
		out.String(string(in.Currency))
	}
	if in.InvoicePayload != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"invoice_payload\":")
		out.String(string(in.InvoicePayload))
	}
	if in.OrderInfo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"order_info\":")
		if in.OrderInfo == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OrderInfo).MarshalJSON())
		}
	}
	if in.ProviderPaymentChargeID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"provider_payment_charge_id\":")
		out.String(string(in.ProviderPaymentChargeID))
	}
	if in.ShippingOptionID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shipping_option_id\":")
		out.String(string(in.ShippingOptionID))
	}
	if in.TelegramPaymentChargeID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"telegram_payment_charge_id\":")
		out.String(string(in.TelegramPaymentChargeID))
	}
	if in.TotalAmount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"total_amount\":")
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SuccessfulPayment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SuccessfulPayment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SuccessfulPayment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SuccessfulPayment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels8(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(in *jlexer.Lexer, out *StopMessageLiveLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(out *jwriter.Writer, in StopMessageLiveLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_id\":")
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StopMessageLiveLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StopMessageLiveLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StopMessageLiveLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StopMessageLiveLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels9(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(in *jlexer.Lexer, out *StickerSet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_masks":
			out.IsMasks = bool(in.Bool())
		case "name":
			out.Name = string(in.String())
		case "stickers":
			if in.IsNull() {
				in.Skip()
				out.Stickers = nil
			} else {
				in.Delim('[')
				if out.Stickers == nil {
					if !in.IsDelim(']') {
						out.Stickers = make([]*Sticker, 0, 8)
					} else {
						out.Stickers = []*Sticker{}
					}
				} else {
					out.Stickers = (out.Stickers)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *Sticker
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(Sticker)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v10).UnmarshalJSON(data))
						}
					}
					out.Stickers = append(out.Stickers, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(out *jwriter.Writer, in StickerSet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.IsMasks {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_masks\":")
		out.Bool(bool(in.IsMasks))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"stickers\":")
	if in.Stickers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in.Stickers {
			if v11 > 0 {
				out.RawByte(',')
			}
			if v12 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v12).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StickerSet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StickerSet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StickerSet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StickerSet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels10(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(in *jlexer.Lexer, out *Sticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emoji":
			out.Emoji = string(in.String())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaskPosition).UnmarshalJSON(data))
				}
			}
		case "set_name":
			out.SetName = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Thumb).UnmarshalJSON(data))
				}
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(out *jwriter.Writer, in Sticker) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Emoji != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"emoji\":")
		out.String(string(in.Emoji))
	}
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"height\":")
		out.Int64(int64(in.Height))
	}
	if in.MaskPosition != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mask_position\":")
		if in.MaskPosition == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MaskPosition).MarshalJSON())
		}
	}
	if in.SetName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"set_name\":")
		out.String(string(in.SetName))
	}
	if in.Thumb != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb\":")
		if in.Thumb == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Thumb).MarshalJSON())
		}
	}
	if in.Width != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"width\":")
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Sticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Sticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Sticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Sticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels11(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(in *jlexer.Lexer, out *ShippingQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "id":
			out.ID = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "shipping_address":
			if in.IsNull() {
				in.Skip()
				out.ShippingAddress = nil
			} else {
				if out.ShippingAddress == nil {
					out.ShippingAddress = new(ShippingAddress)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShippingAddress).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(out *jwriter.Writer, in ShippingQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.From != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from\":")
		if in.From == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.From).MarshalJSON())
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.InvoicePayload != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"invoice_payload\":")
		out.String(string(in.InvoicePayload))
	}
	if in.ShippingAddress != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shipping_address\":")
		if in.ShippingAddress == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShippingAddress).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels12(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(in *jlexer.Lexer, out *ShippingOption) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make([]*LabeledPrice, 0, 8)
					} else {
						out.Prices = []*LabeledPrice{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *LabeledPrice
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(LabeledPrice)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v13).UnmarshalJSON(data))
						}
					}
					out.Prices = append(out.Prices, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(out *jwriter.Writer, in ShippingOption) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prices\":")
	if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v14, v15 := range in.Prices {
			if v14 > 0 {
				out.RawByte(',')
			}
			if v15 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v15).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingOption) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingOption) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingOption) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingOption) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels13(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(in *jlexer.Lexer, out *ShippingAddress) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "city":
			out.City = string(in.String())
		case "country_code":
			out.CountryCode = string(in.String())
		case "post_code":
			out.PostCode = string(in.String())
		case "stat":
			out.Stat = string(in.String())
		case "street_line1":
			out.StreetLine1 = string(in.String())
		case "street_line2":
			out.StreetLine2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(out *jwriter.Writer, in ShippingAddress) {
	out.RawByte('{')
	first := true
	_ = first
	if in.City != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"city\":")
		out.String(string(in.City))
	}
	if in.CountryCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"country_code\":")
		out.String(string(in.CountryCode))
	}
	if in.PostCode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"post_code\":")
		out.String(string(in.PostCode))
	}
	if in.Stat != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"stat\":")
		out.String(string(in.Stat))
	}
	if in.StreetLine1 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"street_line1\":")
		out.String(string(in.StreetLine1))
	}
	if in.StreetLine2 != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"street_line2\":")
		out.String(string(in.StreetLine2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ShippingAddress) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ShippingAddress) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ShippingAddress) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ShippingAddress) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels14(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(in *jlexer.Lexer, out *SendVoiceLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "voice":
			if in.IsNull() {
				in.Skip()
				out.Voice = nil
			} else {
				if out.Voice == nil {
					out.Voice = new(string)
				}
				*out.Voice = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(out *jwriter.Writer, in SendVoiceLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"voice\":")
	if in.Voice == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Voice))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVoiceLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVoiceLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVoiceLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVoiceLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels15(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(in *jlexer.Lexer, out *SendVideoNoteLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "length":
			out.Length = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "video_note":
			if in.IsNull() {
				in.Skip()
				out.VideoNote = nil
			} else {
				if out.VideoNote == nil {
					out.VideoNote = new(string)
				}
				*out.VideoNote = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(out *jwriter.Writer, in SendVideoNoteLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.Length != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"length\":")
		out.Int64(int64(in.Length))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video_note\":")
	if in.VideoNote == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.VideoNote))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVideoNoteLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVideoNoteLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVideoNoteLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVideoNoteLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels16(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(in *jlexer.Lexer, out *SendVideoLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(string)
				}
				*out.Video = string(in.String())
			}
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(out *jwriter.Writer, in SendVideoLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.Height != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"height\":")
		out.Int64(int64(in.Height))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video\":")
	if in.Video == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Video))
	}
	if in.Width != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"width\":")
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVideoLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVideoLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVideoLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVideoLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels17(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(in *jlexer.Lexer, out *SendVenueBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(out *jwriter.Writer, in SendVenueBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"address\":")
	if in.Address == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Address))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.FoursquareID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"foursquare_id\":")
		out.String(string(in.FoursquareID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendVenueBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendVenueBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendVenueBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendVenueBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels18(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(in *jlexer.Lexer, out *SendStickerLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(string)
				}
				*out.Sticker = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(out *jwriter.Writer, in SendStickerLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sticker\":")
	if in.Sticker == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Sticker))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendStickerLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendStickerLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendStickerLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendStickerLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels19(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(in *jlexer.Lexer, out *SendPhotoLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(string)
				}
				*out.Photo = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(out *jwriter.Writer, in SendPhotoLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photo\":")
	if in.Photo == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Photo))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendPhotoLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendPhotoLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendPhotoLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendPhotoLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels20(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(in *jlexer.Lexer, out *SendMessageBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(out *jwriter.Writer, in SendMessageBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.DisableWebPagePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_web_page_preview\":")
		out.Bool(bool(in.DisableWebPagePreview))
	}
	if in.ParseMode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parse_mode\":")
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	if in.Text == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendMessageBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendMessageBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendMessageBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendMessageBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels21(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(in *jlexer.Lexer, out *SendLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(out *jwriter.Writer, in SendLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if in.LivePeriod != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"live_period\":")
		out.Int64(int64(in.LivePeriod))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels22(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(in *jlexer.Lexer, out *SendInvoiceBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatID = nil
			} else {
				if out.ChatID == nil {
					out.ChatID = new(int64)
				}
				*out.ChatID = int64(in.Int64())
			}
		case "currency":
			if in.IsNull() {
				in.Skip()
				out.Currency = nil
			} else {
				if out.Currency == nil {
					out.Currency = new(string)
				}
				*out.Currency = string(in.String())
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "is_flexible":
			out.IsFlexible = bool(in.Bool())
		case "need_email":
			out.NeedEmail = bool(in.Bool())
		case "need_name":
			out.NeedName = bool(in.Bool())
		case "need_phone_number":
			out.NeedPhoneNumber = bool(in.Bool())
		case "need_shipping_address":
			out.NeedShippingAddress = bool(in.Bool())
		case "payload":
			if in.IsNull() {
				in.Skip()
				out.Payload = nil
			} else {
				if out.Payload == nil {
					out.Payload = new(string)
				}
				*out.Payload = string(in.String())
			}
		case "photo_height":
			out.PhotoHeight = int64(in.Int64())
		case "photo_size":
			out.PhotoSize = int64(in.Int64())
		case "photo_url":
			out.PhotoURL = string(in.String())
		case "photo_width":
			out.PhotoWidth = int64(in.Int64())
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make([]*LabeledPrice, 0, 8)
					} else {
						out.Prices = []*LabeledPrice{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *LabeledPrice
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(LabeledPrice)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v16).UnmarshalJSON(data))
						}
					}
					out.Prices = append(out.Prices, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "provider_token":
			if in.IsNull() {
				in.Skip()
				out.ProviderToken = nil
			} else {
				if out.ProviderToken == nil {
					out.ProviderToken = new(string)
				}
				*out.ProviderToken = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "start_parameter":
			if in.IsNull() {
				in.Skip()
				out.StartParameter = nil
			} else {
				if out.StartParameter == nil {
					out.StartParameter = new(string)
				}
				*out.StartParameter = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(out *jwriter.Writer, in SendInvoiceBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if in.ChatID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.ChatID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"currency\":")
	if in.Currency == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Currency))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	if in.Description == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Description))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.IsFlexible {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_flexible\":")
		out.Bool(bool(in.IsFlexible))
	}
	if in.NeedEmail {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"need_email\":")
		out.Bool(bool(in.NeedEmail))
	}
	if in.NeedName {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"need_name\":")
		out.Bool(bool(in.NeedName))
	}
	if in.NeedPhoneNumber {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"need_phone_number\":")
		out.Bool(bool(in.NeedPhoneNumber))
	}
	if in.NeedShippingAddress {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"need_shipping_address\":")
		out.Bool(bool(in.NeedShippingAddress))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"payload\":")
	if in.Payload == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Payload))
	}
	if in.PhotoHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_height\":")
		out.Int64(int64(in.PhotoHeight))
	}
	if in.PhotoSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_size\":")
		out.Int64(int64(in.PhotoSize))
	}
	if in.PhotoURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_url\":")
		out.String(string(in.PhotoURL))
	}
	if in.PhotoWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_width\":")
		out.Int64(int64(in.PhotoWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"prices\":")
	if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v17, v18 := range in.Prices {
			if v17 > 0 {
				out.RawByte(',')
			}
			if v18 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v18).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"provider_token\":")
	if in.ProviderToken == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ProviderToken))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"start_parameter\":")
	if in.StartParameter == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.StartParameter))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendInvoiceBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendInvoiceBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendInvoiceBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendInvoiceBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels23(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(in *jlexer.Lexer, out *SendGameBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if in.IsNull() {
				in.Skip()
				out.ChatID = nil
			} else {
				if out.ChatID == nil {
					out.ChatID = new(int64)
				}
				*out.ChatID = int64(in.Int64())
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "game_short_name":
			if in.IsNull() {
				in.Skip()
				out.GameShortName = nil
			} else {
				if out.GameShortName == nil {
					out.GameShortName = new(string)
				}
				*out.GameShortName = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(out *jwriter.Writer, in SendGameBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if in.ChatID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"game_short_name\":")
	if in.GameShortName == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.GameShortName))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendGameBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendGameBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendGameBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendGameBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels24(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(in *jlexer.Lexer, out *SendDocumentLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "document":
			if in.IsNull() {
				in.Skip()
				out.Document = nil
			} else {
				if out.Document == nil {
					out.Document = new(string)
				}
				*out.Document = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(out *jwriter.Writer, in SendDocumentLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"document\":")
	if in.Document == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Document))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendDocumentLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendDocumentLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendDocumentLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendDocumentLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels25(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(in *jlexer.Lexer, out *SendContactBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(out *jwriter.Writer, in SendContactBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	if in.FirstName == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.FirstName))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phone_number\":")
	if in.PhoneNumber == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PhoneNumber))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendContactBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendContactBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendContactBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendContactBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels26(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(in *jlexer.Lexer, out *SendAudioLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(string)
				}
				*out.Audio = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_notification":
			out.DisableNotification = bool(in.Bool())
		case "duration":
			out.Duration = int64(in.Int64())
		case "performer":
			out.Performer = string(in.String())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		case "reply_to_message_id":
			out.ReplyToMessageID = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(out *jwriter.Writer, in SendAudioLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"audio\":")
	if in.Audio == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Audio))
	}
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.DisableNotification {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_notification\":")
		out.Bool(bool(in.DisableNotification))
	}
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.Performer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"performer\":")
		out.String(string(in.Performer))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	if in.ReplyToMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message_id\":")
		out.Int64(int64(in.ReplyToMessageID))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SendAudioLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SendAudioLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SendAudioLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SendAudioLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels27(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(in *jlexer.Lexer, out *RestrictChatMemberBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_add_web_page_previews":
			out.CanAddWebPagePreviews = bool(in.Bool())
		case "can_send_media_messages":
			out.CanSendMediaMessages = bool(in.Bool())
		case "can_send_messages":
			out.CanSendMessages = bool(in.Bool())
		case "can_send_other_messages":
			out.CanSendOtherMessages = bool(in.Bool())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "until_date":
			out.UntilDate = int64(in.Int64())
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(out *jwriter.Writer, in RestrictChatMemberBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanAddWebPagePreviews {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_add_web_page_previews\":")
		out.Bool(bool(in.CanAddWebPagePreviews))
	}
	if in.CanSendMediaMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_media_messages\":")
		out.Bool(bool(in.CanSendMediaMessages))
	}
	if in.CanSendMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_messages\":")
		out.Bool(bool(in.CanSendMessages))
	}
	if in.CanSendOtherMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_other_messages\":")
		out.Bool(bool(in.CanSendOtherMessages))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if in.UntilDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"until_date\":")
		out.Int64(int64(in.UntilDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	if in.UserID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RestrictChatMemberBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RestrictChatMemberBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RestrictChatMemberBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RestrictChatMemberBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels28(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(in *jlexer.Lexer, out *ResponseUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				in.Delim('[')
				if out.Result == nil {
					if !in.IsDelim(']') {
						out.Result = make([]*Update, 0, 8)
					} else {
						out.Result = []*Update{}
					}
				} else {
					out.Result = (out.Result)[:0]
				}
				for !in.IsDelim(']') {
					var v19 *Update
					if in.IsNull() {
						in.Skip()
						v19 = nil
					} else {
						if v19 == nil {
							v19 = new(Update)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v19).UnmarshalJSON(data))
						}
					}
					out.Result = append(out.Result, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(out *jwriter.Writer, in ResponseUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error_code\":")
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ok\":")
		out.Bool(bool(in.Ok))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"result\":")
	if in.Result == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v20, v21 := range in.Result {
			if v20 > 0 {
				out.RawByte(',')
			}
			if v21 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v21).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels29(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(in *jlexer.Lexer, out *ResponseParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "migrate_to_chat_id":
			out.MigrateToChatID = int64(in.Int64())
		case "retry_after":
			out.RetryAfter = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(out *jwriter.Writer, in ResponseParameters) {
	out.RawByte('{')
	first := true
	_ = first
	if in.MigrateToChatID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"migrate_to_chat_id\":")
		out.Int64(int64(in.MigrateToChatID))
	}
	if in.RetryAfter != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"retry_after\":")
		out.Int64(int64(in.RetryAfter))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels30(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(in *jlexer.Lexer, out *ResponseMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			if in.IsNull() {
				in.Skip()
				out.Result = nil
			} else {
				if out.Result == nil {
					out.Result = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Result).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(out *jwriter.Writer, in ResponseMessage) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error_code\":")
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ok\":")
		out.Bool(bool(in.Ok))
	}
	if in.Result != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		if in.Result == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Result).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels31(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(in *jlexer.Lexer, out *ResponseBool) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		case "result":
			out.Result = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(out *jwriter.Writer, in ResponseBool) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error_code\":")
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ok\":")
		out.Bool(bool(in.Ok))
	}
	if in.Result {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"result\":")
		out.Bool(bool(in.Result))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponseBool) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponseBool) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponseBool) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponseBool) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels32(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(in *jlexer.Lexer, out *ReplyKeyboardRemove) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "remove_keyboard":
			out.RemoveKeyboard = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(out *jwriter.Writer, in ReplyKeyboardRemove) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RemoveKeyboard {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"remove_keyboard\":")
		out.Bool(bool(in.RemoveKeyboard))
	}
	if in.Selective {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selective\":")
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyKeyboardRemove) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyKeyboardRemove) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyKeyboardRemove) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyKeyboardRemove) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels33(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(in *jlexer.Lexer, out *ReplyKeyboardMarkup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "keyboard":
			if in.IsNull() {
				in.Skip()
				out.Keyboard = nil
			} else {
				in.Delim('[')
				if out.Keyboard == nil {
					if !in.IsDelim(']') {
						out.Keyboard = make([]*KeyboardButton, 0, 8)
					} else {
						out.Keyboard = []*KeyboardButton{}
					}
				} else {
					out.Keyboard = (out.Keyboard)[:0]
				}
				for !in.IsDelim(']') {
					var v22 *KeyboardButton
					if in.IsNull() {
						in.Skip()
						v22 = nil
					} else {
						if v22 == nil {
							v22 = new(KeyboardButton)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v22).UnmarshalJSON(data))
						}
					}
					out.Keyboard = append(out.Keyboard, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "one_time_keyboard":
			out.OneTimeKeyboard = bool(in.Bool())
		case "resize_keyboard":
			out.ResizeKeyboard = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(out *jwriter.Writer, in ReplyKeyboardMarkup) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"keyboard\":")
	if in.Keyboard == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v23, v24 := range in.Keyboard {
			if v23 > 0 {
				out.RawByte(',')
			}
			if v24 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v24).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.OneTimeKeyboard {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"one_time_keyboard\":")
		out.Bool(bool(in.OneTimeKeyboard))
	}
	if in.ResizeKeyboard {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"resize_keyboard\":")
		out.Bool(bool(in.ResizeKeyboard))
	}
	if in.Selective {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selective\":")
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ReplyKeyboardMarkup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ReplyKeyboardMarkup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ReplyKeyboardMarkup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ReplyKeyboardMarkup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels34(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(in *jlexer.Lexer, out *PromoteChatMemberBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_change_info":
			if in.IsNull() {
				in.Skip()
				out.CanChangeInfo = nil
			} else {
				if out.CanChangeInfo == nil {
					out.CanChangeInfo = new(bool)
				}
				*out.CanChangeInfo = bool(in.Bool())
			}
		case "can_delete_messages":
			if in.IsNull() {
				in.Skip()
				out.CanDeleteMessages = nil
			} else {
				if out.CanDeleteMessages == nil {
					out.CanDeleteMessages = new(bool)
				}
				*out.CanDeleteMessages = bool(in.Bool())
			}
		case "can_edit_messages":
			if in.IsNull() {
				in.Skip()
				out.CanEditMessages = nil
			} else {
				if out.CanEditMessages == nil {
					out.CanEditMessages = new(bool)
				}
				*out.CanEditMessages = bool(in.Bool())
			}
		case "can_invite_users":
			if in.IsNull() {
				in.Skip()
				out.CanInviteUsers = nil
			} else {
				if out.CanInviteUsers == nil {
					out.CanInviteUsers = new(bool)
				}
				*out.CanInviteUsers = bool(in.Bool())
			}
		case "can_pin_messages":
			if in.IsNull() {
				in.Skip()
				out.CanPinMessages = nil
			} else {
				if out.CanPinMessages == nil {
					out.CanPinMessages = new(bool)
				}
				*out.CanPinMessages = bool(in.Bool())
			}
		case "can_post_messages":
			if in.IsNull() {
				in.Skip()
				out.CanPostMessages = nil
			} else {
				if out.CanPostMessages == nil {
					out.CanPostMessages = new(bool)
				}
				*out.CanPostMessages = bool(in.Bool())
			}
		case "can_promote_members":
			if in.IsNull() {
				in.Skip()
				out.CanPromoteMembers = nil
			} else {
				if out.CanPromoteMembers == nil {
					out.CanPromoteMembers = new(bool)
				}
				*out.CanPromoteMembers = bool(in.Bool())
			}
		case "can_restrict_members":
			if in.IsNull() {
				in.Skip()
				out.CanRestrictMembers = nil
			} else {
				if out.CanRestrictMembers == nil {
					out.CanRestrictMembers = new(bool)
				}
				*out.CanRestrictMembers = bool(in.Bool())
			}
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(out *jwriter.Writer, in PromoteChatMemberBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanChangeInfo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_change_info\":")
		if in.CanChangeInfo == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanChangeInfo))
		}
	}
	if in.CanDeleteMessages != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_delete_messages\":")
		if in.CanDeleteMessages == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanDeleteMessages))
		}
	}
	if in.CanEditMessages != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_edit_messages\":")
		if in.CanEditMessages == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanEditMessages))
		}
	}
	if in.CanInviteUsers != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_invite_users\":")
		if in.CanInviteUsers == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanInviteUsers))
		}
	}
	if in.CanPinMessages != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_pin_messages\":")
		if in.CanPinMessages == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanPinMessages))
		}
	}
	if in.CanPostMessages != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_post_messages\":")
		if in.CanPostMessages == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanPostMessages))
		}
	}
	if in.CanPromoteMembers != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_promote_members\":")
		if in.CanPromoteMembers == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanPromoteMembers))
		}
	}
	if in.CanRestrictMembers != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_restrict_members\":")
		if in.CanRestrictMembers == nil {
			out.RawString("null")
		} else {
			out.Bool(bool(*in.CanRestrictMembers))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"chat_id\":")
	if m, ok := in.ChatID.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.ChatID.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.ChatID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	if in.UserID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PromoteChatMemberBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PromoteChatMemberBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PromoteChatMemberBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PromoteChatMemberBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels35(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(in *jlexer.Lexer, out *PreCheckoutQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "id":
			out.ID = string(in.String())
		case "invoice_payload":
			out.InvoicePayload = string(in.String())
		case "order_info":
			if in.IsNull() {
				in.Skip()
				out.OrderInfo = nil
			} else {
				if out.OrderInfo == nil {
					out.OrderInfo = new(OrderInfo)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.OrderInfo).UnmarshalJSON(data))
				}
			}
		case "shipping_option_id":
			out.ShippingOptionID = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(out *jwriter.Writer, in PreCheckoutQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"currency\":")
		out.String(string(in.Currency))
	}
	if in.From != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from\":")
		if in.From == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.From).MarshalJSON())
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.InvoicePayload != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"invoice_payload\":")
		out.String(string(in.InvoicePayload))
	}
	if in.OrderInfo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"order_info\":")
		if in.OrderInfo == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.OrderInfo).MarshalJSON())
		}
	}
	if in.ShippingOptionID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shipping_option_id\":")
		out.String(string(in.ShippingOptionID))
	}
	if in.TotalAmount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"total_amount\":")
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PreCheckoutQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PreCheckoutQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PreCheckoutQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PreCheckoutQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels36(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(in *jlexer.Lexer, out *PhotoSize) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "height":
			out.Height = int64(in.Int64())
		case "width":
			out.Width = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(out *jwriter.Writer, in PhotoSize) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.Height != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"height\":")
		out.Int64(int64(in.Height))
	}
	if in.Width != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"width\":")
		out.Int64(int64(in.Width))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PhotoSize) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PhotoSize) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PhotoSize) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PhotoSize) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels37(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(in *jlexer.Lexer, out *OrderInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "shipping_address":
			if in.IsNull() {
				in.Skip()
				out.ShippingAddress = nil
			} else {
				if out.ShippingAddress == nil {
					out.ShippingAddress = new(ShippingAddress)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ShippingAddress).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(out *jwriter.Writer, in OrderInfo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Email != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"email\":")
		out.String(string(in.Email))
	}
	if in.Name != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"name\":")
		out.String(string(in.Name))
	}
	if in.PhoneNumber != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"phone_number\":")
		out.String(string(in.PhoneNumber))
	}
	if in.ShippingAddress != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"shipping_address\":")
		if in.ShippingAddress == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ShippingAddress).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels38(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels38(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(in *jlexer.Lexer, out *MessageEntity) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "length":
			out.Length = int64(in.Int64())
		case "offset":
			out.Offset = int64(in.Int64())
		case "type":
			out.Type = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(out *jwriter.Writer, in MessageEntity) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Length != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"length\":")
		out.Int64(int64(in.Length))
	}
	if in.Offset != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"offset\":")
		out.Int64(int64(in.Offset))
	}
	if in.Type != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"type\":")
		out.String(string(in.Type))
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	if in.User != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user\":")
		if in.User == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.User).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageEntity) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageEntity) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels39(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageEntity) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageEntity) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels39(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio":
			if in.IsNull() {
				in.Skip()
				out.Audio = nil
			} else {
				if out.Audio == nil {
					out.Audio = new(Audio)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Audio).UnmarshalJSON(data))
				}
			}
		case "author_signature":
			out.AuthorSignature = string(in.String())
		case "caption":
			out.Caption = string(in.String())
		case "caption_entities":
			if in.IsNull() {
				in.Skip()
				out.CaptionEntities = nil
			} else {
				in.Delim('[')
				if out.CaptionEntities == nil {
					if !in.IsDelim(']') {
						out.CaptionEntities = make([]*MessageEntity, 0, 8)
					} else {
						out.CaptionEntities = []*MessageEntity{}
					}
				} else {
					out.CaptionEntities = (out.CaptionEntities)[:0]
				}
				for !in.IsDelim(']') {
					var v25 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v25 = nil
					} else {
						if v25 == nil {
							v25 = new(MessageEntity)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v25).UnmarshalJSON(data))
						}
					}
					out.CaptionEntities = append(out.CaptionEntities, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "channel_chat_created":
			out.ChannelChatCreated = bool(in.Bool())
		case "chat":
			if in.IsNull() {
				in.Skip()
				out.Chat = nil
			} else {
				if out.Chat == nil {
					out.Chat = new(Chat)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Chat).UnmarshalJSON(data))
				}
			}
		case "contact":
			if in.IsNull() {
				in.Skip()
				out.Contact = nil
			} else {
				if out.Contact == nil {
					out.Contact = new(Contact)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Contact).UnmarshalJSON(data))
				}
			}
		case "date":
			out.Date = int64(in.Int64())
		case "delete_chat_photo":
			out.DeleteChatPhoto = bool(in.Bool())
		case "document":
			if in.IsNull() {
				in.Skip()
				out.Document = nil
			} else {
				if out.Document == nil {
					out.Document = new(Document)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Document).UnmarshalJSON(data))
				}
			}
		case "edit_date":
			out.EditDate = int64(in.Int64())
		case "entities":
			if in.IsNull() {
				in.Skip()
				out.Entities = nil
			} else {
				in.Delim('[')
				if out.Entities == nil {
					if !in.IsDelim(']') {
						out.Entities = make([]*MessageEntity, 0, 8)
					} else {
						out.Entities = []*MessageEntity{}
					}
				} else {
					out.Entities = (out.Entities)[:0]
				}
				for !in.IsDelim(']') {
					var v26 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v26 = nil
					} else {
						if v26 == nil {
							v26 = new(MessageEntity)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v26).UnmarshalJSON(data))
						}
					}
					out.Entities = append(out.Entities, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "forward_date":
			out.ForwardDate = int64(in.Int64())
		case "forward_from":
			if in.IsNull() {
				in.Skip()
				out.ForwardFrom = nil
			} else {
				if out.ForwardFrom == nil {
					out.ForwardFrom = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForwardFrom).UnmarshalJSON(data))
				}
			}
		case "forward_from_chat":
			if in.IsNull() {
				in.Skip()
				out.ForwardFromChat = nil
			} else {
				if out.ForwardFromChat == nil {
					out.ForwardFromChat = new(Chat)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ForwardFromChat).UnmarshalJSON(data))
				}
			}
		case "forward_from_message_id":
			out.ForwardFromMessageID = int64(in.Int64())
		case "forward_signature":
			out.ForwardSignature = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "game":
			if in.IsNull() {
				in.Skip()
				out.Game = nil
			} else {
				if out.Game == nil {
					out.Game = new(Game)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Game).UnmarshalJSON(data))
				}
			}
		case "group_chat_created":
			out.GroupChatCreated = bool(in.Bool())
		case "invoice":
			if in.IsNull() {
				in.Skip()
				out.Invoice = nil
			} else {
				if out.Invoice == nil {
					out.Invoice = new(Invoice)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Invoice).UnmarshalJSON(data))
				}
			}
		case "left_chat_member":
			if in.IsNull() {
				in.Skip()
				out.LeftChatMember = nil
			} else {
				if out.LeftChatMember == nil {
					out.LeftChatMember = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.LeftChatMember).UnmarshalJSON(data))
				}
			}
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Location).UnmarshalJSON(data))
				}
			}
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "migrate_from_chat_id":
			out.MigrateFromChatID = int64(in.Int64())
		case "migrate_to_chat_id":
			out.MigrateToChatID = int64(in.Int64())
		case "new_chat_members":
			if in.IsNull() {
				in.Skip()
				out.NewChatMembers = nil
			} else {
				in.Delim('[')
				if out.NewChatMembers == nil {
					if !in.IsDelim(']') {
						out.NewChatMembers = make([]*User, 0, 8)
					} else {
						out.NewChatMembers = []*User{}
					}
				} else {
					out.NewChatMembers = (out.NewChatMembers)[:0]
				}
				for !in.IsDelim(']') {
					var v27 *User
					if in.IsNull() {
						in.Skip()
						v27 = nil
					} else {
						if v27 == nil {
							v27 = new(User)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v27).UnmarshalJSON(data))
						}
					}
					out.NewChatMembers = append(out.NewChatMembers, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "new_chat_photo":
			if in.IsNull() {
				in.Skip()
				out.NewChatPhoto = nil
			} else {
				in.Delim('[')
				if out.NewChatPhoto == nil {
					if !in.IsDelim(']') {
						out.NewChatPhoto = make([]*PhotoSize, 0, 8)
					} else {
						out.NewChatPhoto = []*PhotoSize{}
					}
				} else {
					out.NewChatPhoto = (out.NewChatPhoto)[:0]
				}
				for !in.IsDelim(']') {
					var v28 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v28 = nil
					} else {
						if v28 == nil {
							v28 = new(PhotoSize)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v28).UnmarshalJSON(data))
						}
					}
					out.NewChatPhoto = append(out.NewChatPhoto, v28)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "new_chat_title":
			out.NewChatTitle = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]*PhotoSize, 0, 8)
					} else {
						out.Photo = []*PhotoSize{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v29 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v29 = nil
					} else {
						if v29 == nil {
							v29 = new(PhotoSize)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v29).UnmarshalJSON(data))
						}
					}
					out.Photo = append(out.Photo, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pinned_message":
			if in.IsNull() {
				in.Skip()
				out.PinnedMessage = nil
			} else {
				if out.PinnedMessage == nil {
					out.PinnedMessage = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PinnedMessage).UnmarshalJSON(data))
				}
			}
		case "reply_to_message":
			if in.IsNull() {
				in.Skip()
				out.ReplyToMessage = nil
			} else {
				if out.ReplyToMessage == nil {
					out.ReplyToMessage = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyToMessage).UnmarshalJSON(data))
				}
			}
		case "sticker":
			if in.IsNull() {
				in.Skip()
				out.Sticker = nil
			} else {
				if out.Sticker == nil {
					out.Sticker = new(Sticker)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Sticker).UnmarshalJSON(data))
				}
			}
		case "successful_payment":
			if in.IsNull() {
				in.Skip()
				out.SuccessfulPayment = nil
			} else {
				if out.SuccessfulPayment == nil {
					out.SuccessfulPayment = new(SuccessfulPayment)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.SuccessfulPayment).UnmarshalJSON(data))
				}
			}
		case "supergroup_chat_created":
			out.SupergroupChatCreated = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		case "venue":
			if in.IsNull() {
				in.Skip()
				out.Venue = nil
			} else {
				if out.Venue == nil {
					out.Venue = new(Venue)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Venue).UnmarshalJSON(data))
				}
			}
		case "video":
			if in.IsNull() {
				in.Skip()
				out.Video = nil
			} else {
				if out.Video == nil {
					out.Video = new(Video)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Video).UnmarshalJSON(data))
				}
			}
		case "video_note":
			if in.IsNull() {
				in.Skip()
				out.VideoNote = nil
			} else {
				if out.VideoNote == nil {
					out.VideoNote = new(VideoNote)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.VideoNote).UnmarshalJSON(data))
				}
			}
		case "voice":
			if in.IsNull() {
				in.Skip()
				out.Voice = nil
			} else {
				if out.Voice == nil {
					out.Voice = new(Voice)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Voice).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Audio != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"audio\":")
		if in.Audio == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Audio).MarshalJSON())
		}
	}
	if in.AuthorSignature != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"author_signature\":")
		out.String(string(in.AuthorSignature))
	}
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"caption_entities\":")
	if in.CaptionEntities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v30, v31 := range in.CaptionEntities {
			if v30 > 0 {
				out.RawByte(',')
			}
			if v31 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v31).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.ChannelChatCreated {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"channel_chat_created\":")
		out.Bool(bool(in.ChannelChatCreated))
	}
	if in.Chat != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat\":")
		if in.Chat == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Chat).MarshalJSON())
		}
	}
	if in.Contact != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"contact\":")
		if in.Contact == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Contact).MarshalJSON())
		}
	}
	if in.Date != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"date\":")
		out.Int64(int64(in.Date))
	}
	if in.DeleteChatPhoto {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"delete_chat_photo\":")
		out.Bool(bool(in.DeleteChatPhoto))
	}
	if in.Document != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"document\":")
		if in.Document == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Document).MarshalJSON())
		}
	}
	if in.EditDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"edit_date\":")
		out.Int64(int64(in.EditDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"entities\":")
	if in.Entities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in.Entities {
			if v32 > 0 {
				out.RawByte(',')
			}
			if v33 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v33).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.ForwardDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"forward_date\":")
		out.Int64(int64(in.ForwardDate))
	}
	if in.ForwardFrom != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"forward_from\":")
		if in.ForwardFrom == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ForwardFrom).MarshalJSON())
		}
	}
	if in.ForwardFromChat != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"forward_from_chat\":")
		if in.ForwardFromChat == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ForwardFromChat).MarshalJSON())
		}
	}
	if in.ForwardFromMessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"forward_from_message_id\":")
		out.Int64(int64(in.ForwardFromMessageID))
	}
	if in.ForwardSignature != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"forward_signature\":")
		out.String(string(in.ForwardSignature))
	}
	if in.From != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from\":")
		if in.From == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.From).MarshalJSON())
		}
	}
	if in.Game != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"game\":")
		if in.Game == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Game).MarshalJSON())
		}
	}
	if in.GroupChatCreated {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"group_chat_created\":")
		out.Bool(bool(in.GroupChatCreated))
	}
	if in.Invoice != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"invoice\":")
		if in.Invoice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Invoice).MarshalJSON())
		}
	}
	if in.LeftChatMember != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"left_chat_member\":")
		if in.LeftChatMember == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.LeftChatMember).MarshalJSON())
		}
	}
	if in.Location != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"location\":")
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Location).MarshalJSON())
		}
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.MigrateFromChatID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"migrate_from_chat_id\":")
		out.Int64(int64(in.MigrateFromChatID))
	}
	if in.MigrateToChatID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"migrate_to_chat_id\":")
		out.Int64(int64(in.MigrateToChatID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"new_chat_members\":")
	if in.NewChatMembers == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v34, v35 := range in.NewChatMembers {
			if v34 > 0 {
				out.RawByte(',')
			}
			if v35 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v35).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"new_chat_photo\":")
	if in.NewChatPhoto == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v36, v37 := range in.NewChatPhoto {
			if v36 > 0 {
				out.RawByte(',')
			}
			if v37 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v37).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.NewChatTitle != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"new_chat_title\":")
		out.String(string(in.NewChatTitle))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photo\":")
	if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v38, v39 := range in.Photo {
			if v38 > 0 {
				out.RawByte(',')
			}
			if v39 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v39).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.PinnedMessage != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pinned_message\":")
		if in.PinnedMessage == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PinnedMessage).MarshalJSON())
		}
	}
	if in.ReplyToMessage != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_to_message\":")
		if in.ReplyToMessage == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyToMessage).MarshalJSON())
		}
	}
	if in.Sticker != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sticker\":")
		if in.Sticker == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Sticker).MarshalJSON())
		}
	}
	if in.SuccessfulPayment != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"successful_payment\":")
		if in.SuccessfulPayment == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.SuccessfulPayment).MarshalJSON())
		}
	}
	if in.SupergroupChatCreated {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"supergroup_chat_created\":")
		out.Bool(bool(in.SupergroupChatCreated))
	}
	if in.Text != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"text\":")
		out.String(string(in.Text))
	}
	if in.Venue != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"venue\":")
		if in.Venue == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Venue).MarshalJSON())
		}
	}
	if in.Video != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video\":")
		if in.Video == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Video).MarshalJSON())
		}
	}
	if in.VideoNote != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video_note\":")
		if in.VideoNote == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.VideoNote).MarshalJSON())
		}
	}
	if in.Voice != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"voice\":")
		if in.Voice == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Voice).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels40(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels40(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(in *jlexer.Lexer, out *MaskPosition) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "point":
			out.Point = string(in.String())
		case "x_shift":
			out.XShift = float64(in.Float64())
		case "y_shift":
			out.YShift = float64(in.Float64())
		case "zoom":
			out.Zoom = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(out *jwriter.Writer, in MaskPosition) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Point != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"point\":")
		out.String(string(in.Point))
	}
	if in.XShift != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"x_shift\":")
		out.Float64(float64(in.XShift))
	}
	if in.YShift != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"y_shift\":")
		out.Float64(float64(in.YShift))
	}
	if in.Zoom != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"zoom\":")
		out.Float64(float64(in.Zoom))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MaskPosition) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MaskPosition) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels41(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MaskPosition) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MaskPosition) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels41(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(in *jlexer.Lexer, out *Location) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			out.Latitude = float64(in.Float64())
		case "longitude":
			out.Longitude = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(out *jwriter.Writer, in Location) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Latitude != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"latitude\":")
		out.Float64(float64(in.Latitude))
	}
	if in.Longitude != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"longitude\":")
		out.Float64(float64(in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Location) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Location) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels42(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Location) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Location) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels42(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(in *jlexer.Lexer, out *LabeledPrice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int64(in.Int64())
		case "label":
			out.Label = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(out *jwriter.Writer, in LabeledPrice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Amount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"amount\":")
		out.Int64(int64(in.Amount))
	}
	if in.Label != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"label\":")
		out.String(string(in.Label))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LabeledPrice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LabeledPrice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels43(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LabeledPrice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LabeledPrice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels43(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(in *jlexer.Lexer, out *KeyboardButton) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "request_contact":
			out.RequestContact = bool(in.Bool())
		case "request_location":
			out.RequestLocation = bool(in.Bool())
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(out *jwriter.Writer, in KeyboardButton) {
	out.RawByte('{')
	first := true
	_ = first
	if in.RequestContact {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"request_contact\":")
		out.Bool(bool(in.RequestContact))
	}
	if in.RequestLocation {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"request_location\":")
		out.Bool(bool(in.RequestLocation))
	}
	if in.Text != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"text\":")
		out.String(string(in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v KeyboardButton) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyboardButton) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels44(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyboardButton) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyboardButton) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels44(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(in *jlexer.Lexer, out *Invoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "start_parameter":
			out.StartParameter = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "total_amount":
			out.TotalAmount = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(out *jwriter.Writer, in Invoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"currency\":")
		out.String(string(in.Currency))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.StartParameter != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"start_parameter\":")
		out.String(string(in.StartParameter))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if in.TotalAmount != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"total_amount\":")
		out.Int64(int64(in.TotalAmount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Invoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Invoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels45(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Invoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Invoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels45(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(in *jlexer.Lexer, out *InputVenueMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(out *jwriter.Writer, in InputVenueMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"address\":")
	if in.Address == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Address))
	}
	if in.FoursquareID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"foursquare_id\":")
		out.String(string(in.FoursquareID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputVenueMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputVenueMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels46(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputVenueMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputVenueMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels46(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(in *jlexer.Lexer, out *InputTextMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "message_text":
			if in.IsNull() {
				in.Skip()
				out.MessageText = nil
			} else {
				if out.MessageText == nil {
					out.MessageText = new(string)
				}
				*out.MessageText = string(in.String())
			}
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(out *jwriter.Writer, in InputTextMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	if in.DisableWebPagePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_web_page_preview\":")
		out.Bool(bool(in.DisableWebPagePreview))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"message_text\":")
	if in.MessageText == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.MessageText))
	}
	if in.ParseMode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parse_mode\":")
		out.String(string(in.ParseMode))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputTextMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputTextMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels47(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputTextMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputTextMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels47(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(in *jlexer.Lexer, out *InputLocationMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(out *jwriter.Writer, in InputLocationMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if in.LivePeriod != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"live_period\":")
		out.Int64(int64(in.LivePeriod))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputLocationMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputLocationMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels48(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputLocationMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputLocationMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels48(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(in *jlexer.Lexer, out *InputContactMessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(out *jwriter.Writer, in InputContactMessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	if in.FirstName == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.FirstName))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phone_number\":")
	if in.PhoneNumber == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PhoneNumber))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputContactMessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputContactMessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels49(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputContactMessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputContactMessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels49(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(in *jlexer.Lexer, out *InlineQueryResultVoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "voice_duration":
			out.VoiceDuration = int64(in.Int64())
		case "voice_url":
			if in.IsNull() {
				in.Skip()
				out.VoiceURL = nil
			} else {
				if out.VoiceURL == nil {
					out.VoiceURL = new(string)
				}
				*out.VoiceURL = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(out *jwriter.Writer, in InlineQueryResultVoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if in.VoiceDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"voice_duration\":")
		out.Int64(int64(in.VoiceDuration))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"voice_url\":")
	if in.VoiceURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.VoiceURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels50(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels50(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(in *jlexer.Lexer, out *InlineQueryResultVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mime_type":
			if in.IsNull() {
				in.Skip()
				out.MimeType = nil
			} else {
				if out.MimeType == nil {
					out.MimeType = new(string)
				}
				*out.MimeType = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "video_duration":
			out.VideoDuration = int64(in.Int64())
		case "video_height":
			out.VideoHeight = int64(in.Int64())
		case "video_url":
			if in.IsNull() {
				in.Skip()
				out.VideoURL = nil
			} else {
				if out.VideoURL == nil {
					out.VideoURL = new(string)
				}
				*out.VideoURL = string(in.String())
			}
		case "video_width":
			out.VideoWidth = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(out *jwriter.Writer, in InlineQueryResultVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mime_type\":")
	if in.MimeType == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.MimeType))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thumb_url\":")
	if in.ThumbURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ThumbURL))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if in.VideoDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video_duration\":")
		out.Int64(int64(in.VideoDuration))
	}
	if in.VideoHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video_height\":")
		out.Int64(int64(in.VideoHeight))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video_url\":")
	if in.VideoURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.VideoURL))
	}
	if in.VideoWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"video_width\":")
		out.Int64(int64(in.VideoWidth))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels51(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels51(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(in *jlexer.Lexer, out *InlineQueryResultVenue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "address":
			if in.IsNull() {
				in.Skip()
				out.Address = nil
			} else {
				if out.Address == nil {
					out.Address = new(string)
				}
				*out.Address = string(in.String())
			}
		case "foursquare_id":
			out.FoursquareID = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(out *jwriter.Writer, in InlineQueryResultVenue) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"address\":")
	if in.Address == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Address))
	}
	if in.FoursquareID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"foursquare_id\":")
		out.String(string(in.FoursquareID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ThumbHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_height\":")
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_url\":")
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_width\":")
		out.Int64(int64(in.ThumbWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultVenue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultVenue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels52(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultVenue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultVenue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels52(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(in *jlexer.Lexer, out *InlineQueryResultPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "photo_height":
			out.PhotoHeight = int64(in.Int64())
		case "photo_url":
			if in.IsNull() {
				in.Skip()
				out.PhotoURL = nil
			} else {
				if out.PhotoURL == nil {
					out.PhotoURL = new(string)
				}
				*out.PhotoURL = string(in.String())
			}
		case "photo_width":
			out.PhotoWidth = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(out *jwriter.Writer, in InlineQueryResultPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.PhotoHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_height\":")
		out.Int64(int64(in.PhotoHeight))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photo_url\":")
	if in.PhotoURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PhotoURL))
	}
	if in.PhotoWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo_width\":")
		out.Int64(int64(in.PhotoWidth))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thumb_url\":")
	if in.ThumbURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ThumbURL))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels53(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels53(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(in *jlexer.Lexer, out *InlineQueryResultMpeg4Gif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mpeg4_duration":
			out.Mpeg4Duration = int64(in.Int64())
		case "mpeg4_height":
			out.Mpeg4Height = int64(in.Int64())
		case "mpeg4_url":
			if in.IsNull() {
				in.Skip()
				out.Mpeg4URL = nil
			} else {
				if out.Mpeg4URL == nil {
					out.Mpeg4URL = new(string)
				}
				*out.Mpeg4URL = string(in.String())
			}
		case "mpeg4_width":
			out.Mpeg4Width = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(out *jwriter.Writer, in InlineQueryResultMpeg4Gif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.Mpeg4Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mpeg4_duration\":")
		out.Int64(int64(in.Mpeg4Duration))
	}
	if in.Mpeg4Height != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mpeg4_height\":")
		out.Int64(int64(in.Mpeg4Height))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mpeg4_url\":")
	if in.Mpeg4URL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Mpeg4URL))
	}
	if in.Mpeg4Width != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mpeg4_width\":")
		out.Int64(int64(in.Mpeg4Width))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thumb_url\":")
	if in.ThumbURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ThumbURL))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultMpeg4Gif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultMpeg4Gif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels54(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultMpeg4Gif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultMpeg4Gif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels54(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(in *jlexer.Lexer, out *InlineQueryResultLocation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "live_period":
			out.LivePeriod = int64(in.Int64())
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(out *jwriter.Writer, in InlineQueryResultLocation) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if in.LivePeriod != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"live_period\":")
		out.Int64(int64(in.LivePeriod))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ThumbHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_height\":")
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_url\":")
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_width\":")
		out.Int64(int64(in.ThumbWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultLocation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultLocation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels55(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultLocation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultLocation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels55(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(in *jlexer.Lexer, out *InlineQueryResultGif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "gif_duration":
			out.GifDuration = int64(in.Int64())
		case "gif_height":
			out.GifHeight = int64(in.Int64())
		case "gif_url":
			if in.IsNull() {
				in.Skip()
				out.GifURL = nil
			} else {
				if out.GifURL == nil {
					out.GifURL = new(string)
				}
				*out.GifURL = string(in.String())
			}
		case "gif_width":
			out.GifWidth = int64(in.Int64())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_url":
			if in.IsNull() {
				in.Skip()
				out.ThumbURL = nil
			} else {
				if out.ThumbURL == nil {
					out.ThumbURL = new(string)
				}
				*out.ThumbURL = string(in.String())
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(out *jwriter.Writer, in InlineQueryResultGif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.GifDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gif_duration\":")
		out.Int64(int64(in.GifDuration))
	}
	if in.GifHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gif_height\":")
		out.Int64(int64(in.GifHeight))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gif_url\":")
	if in.GifURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.GifURL))
	}
	if in.GifWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"gif_width\":")
		out.Int64(int64(in.GifWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"thumb_url\":")
	if in.ThumbURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ThumbURL))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultGif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultGif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels56(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultGif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultGif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels56(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(in *jlexer.Lexer, out *InlineQueryResultGame) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "game_short_name":
			if in.IsNull() {
				in.Skip()
				out.GameShortName = nil
			} else {
				if out.GameShortName == nil {
					out.GameShortName = new(string)
				}
				*out.GameShortName = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(out *jwriter.Writer, in InlineQueryResultGame) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"game_short_name\":")
	if in.GameShortName == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.GameShortName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultGame) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultGame) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels57(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultGame) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultGame) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels57(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(in *jlexer.Lexer, out *InlineQueryResultDocument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "document_url":
			if in.IsNull() {
				in.Skip()
				out.DocumentURL = nil
			} else {
				if out.DocumentURL == nil {
					out.DocumentURL = new(string)
				}
				*out.DocumentURL = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mime_type":
			if in.IsNull() {
				in.Skip()
				out.MimeType = nil
			} else {
				if out.MimeType == nil {
					out.MimeType = new(string)
				}
				*out.MimeType = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(out *jwriter.Writer, in InlineQueryResultDocument) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"document_url\":")
	if in.DocumentURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.DocumentURL))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mime_type\":")
	if in.MimeType == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.MimeType))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ThumbHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_height\":")
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_url\":")
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_width\":")
		out.Int64(int64(in.ThumbWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultDocument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultDocument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels58(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultDocument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultDocument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels58(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(in *jlexer.Lexer, out *InlineQueryResultContact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			if in.IsNull() {
				in.Skip()
				out.FirstName = nil
			} else {
				if out.FirstName == nil {
					out.FirstName = new(string)
				}
				*out.FirstName = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			if in.IsNull() {
				in.Skip()
				out.PhoneNumber = nil
			} else {
				if out.PhoneNumber == nil {
					out.PhoneNumber = new(string)
				}
				*out.PhoneNumber = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(out *jwriter.Writer, in InlineQueryResultContact) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"first_name\":")
	if in.FirstName == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.FirstName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"phone_number\":")
	if in.PhoneNumber == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PhoneNumber))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ThumbHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_height\":")
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_url\":")
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_width\":")
		out.Int64(int64(in.ThumbWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultContact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultContact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels59(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultContact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultContact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels59(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(in *jlexer.Lexer, out *InlineQueryResultCachedVoice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		case "voice_file_id":
			if in.IsNull() {
				in.Skip()
				out.VoiceFileID = nil
			} else {
				if out.VoiceFileID == nil {
					out.VoiceFileID = new(string)
				}
				*out.VoiceFileID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(out *jwriter.Writer, in InlineQueryResultCachedVoice) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"voice_file_id\":")
	if in.VoiceFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.VoiceFileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedVoice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedVoice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels60(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedVoice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedVoice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels60(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(in *jlexer.Lexer, out *InlineQueryResultCachedVideo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		case "video_file_id":
			if in.IsNull() {
				in.Skip()
				out.VideoFileID = nil
			} else {
				if out.VideoFileID == nil {
					out.VideoFileID = new(string)
				}
				*out.VideoFileID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(out *jwriter.Writer, in InlineQueryResultCachedVideo) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"video_file_id\":")
	if in.VideoFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.VideoFileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedVideo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedVideo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels61(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedVideo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedVideo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels61(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(in *jlexer.Lexer, out *InlineQueryResultCachedSticker) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "sticker_file_id":
			if in.IsNull() {
				in.Skip()
				out.StickerFileID = nil
			} else {
				if out.StickerFileID == nil {
					out.StickerFileID = new(string)
				}
				*out.StickerFileID = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(out *jwriter.Writer, in InlineQueryResultCachedSticker) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sticker_file_id\":")
	if in.StickerFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.StickerFileID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedSticker) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedSticker) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels62(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedSticker) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedSticker) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels62(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(in *jlexer.Lexer, out *InlineQueryResultCachedPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "photo_file_id":
			if in.IsNull() {
				in.Skip()
				out.PhotoFileID = nil
			} else {
				if out.PhotoFileID == nil {
					out.PhotoFileID = new(string)
				}
				*out.PhotoFileID = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(out *jwriter.Writer, in InlineQueryResultCachedPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photo_file_id\":")
	if in.PhotoFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PhotoFileID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels63(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels63(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(in *jlexer.Lexer, out *InlineQueryResultCachedMpeg4Gif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "mpeg4_file_id":
			if in.IsNull() {
				in.Skip()
				out.Mpeg4FileID = nil
			} else {
				if out.Mpeg4FileID == nil {
					out.Mpeg4FileID = new(string)
				}
				*out.Mpeg4FileID = string(in.String())
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(out *jwriter.Writer, in InlineQueryResultCachedMpeg4Gif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"mpeg4_file_id\":")
	if in.Mpeg4FileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Mpeg4FileID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedMpeg4Gif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedMpeg4Gif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels64(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedMpeg4Gif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedMpeg4Gif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels64(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(in *jlexer.Lexer, out *InlineQueryResultCachedGif) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "gif_file_id":
			if in.IsNull() {
				in.Skip()
				out.GifFileID = nil
			} else {
				if out.GifFileID == nil {
					out.GifFileID = new(string)
				}
				*out.GifFileID = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			out.Title = string(in.String())
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(out *jwriter.Writer, in InlineQueryResultCachedGif) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"gif_file_id\":")
	if in.GifFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.GifFileID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedGif) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedGif) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels65(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedGif) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedGif) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels65(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(in *jlexer.Lexer, out *InlineQueryResultCachedDocument) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "document_file_id":
			if in.IsNull() {
				in.Skip()
				out.DocumentFileID = nil
			} else {
				if out.DocumentFileID == nil {
					out.DocumentFileID = new(string)
				}
				*out.DocumentFileID = string(in.String())
			}
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(out *jwriter.Writer, in InlineQueryResultCachedDocument) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"document_file_id\":")
	if in.DocumentFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.DocumentFileID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedDocument) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedDocument) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels66(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedDocument) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedDocument) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels66(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(in *jlexer.Lexer, out *InlineQueryResultCachedAudio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio_file_id":
			if in.IsNull() {
				in.Skip()
				out.AudioFileID = nil
			} else {
				if out.AudioFileID == nil {
					out.AudioFileID = new(string)
				}
				*out.AudioFileID = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(out *jwriter.Writer, in InlineQueryResultCachedAudio) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"audio_file_id\":")
	if in.AudioFileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.AudioFileID))
	}
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultCachedAudio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultCachedAudio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels67(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultCachedAudio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultCachedAudio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels67(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(in *jlexer.Lexer, out *InlineQueryResultAudio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "audio_duration":
			out.AudioDuration = int64(in.Int64())
		case "audio_url":
			if in.IsNull() {
				in.Skip()
				out.AudioURL = nil
			} else {
				if out.AudioURL == nil {
					out.AudioURL = new(string)
				}
				*out.AudioURL = string(in.String())
			}
		case "caption":
			out.Caption = string(in.String())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "performer":
			out.Performer = string(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(out *jwriter.Writer, in InlineQueryResultAudio) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AudioDuration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"audio_duration\":")
		out.Int64(int64(in.AudioDuration))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"audio_url\":")
	if in.AudioURL == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.AudioURL))
	}
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if in.InputMessageContent != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"input_message_content\":")
		if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.InputMessageContent))
		}
	}
	if in.Performer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"performer\":")
		out.String(string(in.Performer))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultAudio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultAudio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels68(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultAudio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultAudio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels68(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(in *jlexer.Lexer, out *InlineQueryResultArticle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "hide_url":
			out.HideURL = bool(in.Bool())
		case "id":
			if in.IsNull() {
				in.Skip()
				out.ID = nil
			} else {
				if out.ID == nil {
					out.ID = new(string)
				}
				*out.ID = string(in.String())
			}
		case "input_message_content":
			if m, ok := out.InputMessageContent.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.InputMessageContent.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.InputMessageContent = in.Interface()
			}
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "thumb_height":
			out.ThumbHeight = int64(in.Int64())
		case "thumb_url":
			out.ThumbURL = string(in.String())
		case "thumb_width":
			out.ThumbWidth = int64(in.Int64())
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "type":
			out.Type = InlineType(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(out *jwriter.Writer, in InlineQueryResultArticle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.HideURL {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"hide_url\":")
		out.Bool(bool(in.HideURL))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	if in.ID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"input_message_content\":")
	if m, ok := in.InputMessageContent.(easyjson.Marshaler); ok {
		m.MarshalEasyJSON(out)
	} else if m, ok := in.InputMessageContent.(json.Marshaler); ok {
		out.Raw(m.MarshalJSON())
	} else {
		out.Raw(json.Marshal(in.InputMessageContent))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if in.ThumbHeight != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_height\":")
		out.Int64(int64(in.ThumbHeight))
	}
	if in.ThumbURL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_url\":")
		out.String(string(in.ThumbURL))
	}
	if in.ThumbWidth != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb_width\":")
		out.Int64(int64(in.ThumbWidth))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQueryResultArticle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQueryResultArticle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels69(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQueryResultArticle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQueryResultArticle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels69(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(in *jlexer.Lexer, out *InlineQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "id":
			out.ID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Location).UnmarshalJSON(data))
				}
			}
		case "offset":
			out.Offset = string(in.String())
		case "query":
			out.Query = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(out *jwriter.Writer, in InlineQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.From != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from\":")
		if in.From == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.From).MarshalJSON())
		}
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.Location != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"location\":")
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Location).MarshalJSON())
		}
	}
	if in.Offset != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"offset\":")
		out.String(string(in.Offset))
	}
	if in.Query != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"query\":")
		out.String(string(in.Query))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels70(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels70(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(in *jlexer.Lexer, out *InlineKeyboardMarkup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "inline_keyboard":
			if in.IsNull() {
				in.Skip()
				out.InlineKeyboard = nil
			} else {
				in.Delim('[')
				if out.InlineKeyboard == nil {
					if !in.IsDelim(']') {
						out.InlineKeyboard = make([][]*InlineKeyboardButton, 0, 2)
					} else {
						out.InlineKeyboard = [][]*InlineKeyboardButton{}
					}
				} else {
					out.InlineKeyboard = (out.InlineKeyboard)[:0]
				}
				for !in.IsDelim(']') {
					var v40 []*InlineKeyboardButton
					if in.IsNull() {
						in.Skip()
						v40 = nil
					} else {
						in.Delim('[')
						if v40 == nil {
							if !in.IsDelim(']') {
								v40 = make([]*InlineKeyboardButton, 0, 8)
							} else {
								v40 = []*InlineKeyboardButton{}
							}
						} else {
							v40 = (v40)[:0]
						}
						for !in.IsDelim(']') {
							var v41 *InlineKeyboardButton
							if in.IsNull() {
								in.Skip()
								v41 = nil
							} else {
								if v41 == nil {
									v41 = new(InlineKeyboardButton)
								}
								if data := in.Raw(); in.Ok() {
									in.AddError((*v41).UnmarshalJSON(data))
								}
							}
							v40 = append(v40, v41)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.InlineKeyboard = append(out.InlineKeyboard, v40)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(out *jwriter.Writer, in InlineKeyboardMarkup) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inline_keyboard\":")
	if in.InlineKeyboard == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v42, v43 := range in.InlineKeyboard {
			if v42 > 0 {
				out.RawByte(',')
			}
			if v43 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v44, v45 := range v43 {
					if v44 > 0 {
						out.RawByte(',')
					}
					if v45 == nil {
						out.RawString("null")
					} else {
						out.Raw((*v45).MarshalJSON())
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardMarkup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardMarkup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels71(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardMarkup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels71(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(in *jlexer.Lexer, out *InlineKeyboardButton) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "callback_data":
			out.CallbackData = string(in.String())
		case "callback_game":
			if m, ok := out.CallbackGame.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.CallbackGame.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.CallbackGame = in.Interface()
			}
		case "pay":
			out.Pay = bool(in.Bool())
		case "switch_inline_query":
			out.SwitchInlineQuery = string(in.String())
		case "switch_inline_query_current_chat":
			out.SwitchInlineQueryCurrentChat = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(out *jwriter.Writer, in InlineKeyboardButton) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CallbackData != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"callback_data\":")
		out.String(string(in.CallbackData))
	}
	if in.CallbackGame != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"callback_game\":")
		if m, ok := in.CallbackGame.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.CallbackGame.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.CallbackGame))
		}
	}
	if in.Pay {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pay\":")
		out.Bool(bool(in.Pay))
	}
	if in.SwitchInlineQuery != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"switch_inline_query\":")
		out.String(string(in.SwitchInlineQuery))
	}
	if in.SwitchInlineQueryCurrentChat != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"switch_inline_query_current_chat\":")
		out.String(string(in.SwitchInlineQueryCurrentChat))
	}
	if in.Text != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"text\":")
		out.String(string(in.Text))
	}
	if in.URL != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"url\":")
		out.String(string(in.URL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InlineKeyboardButton) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InlineKeyboardButton) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels72(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InlineKeyboardButton) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels72(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(in *jlexer.Lexer, out *GameHighScore) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "position":
			out.Position = int64(in.Int64())
		case "score":
			out.Score = int64(in.Int64())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(out *jwriter.Writer, in GameHighScore) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Position != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"position\":")
		out.Int64(int64(in.Position))
	}
	if in.Score != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"score\":")
		out.Int64(int64(in.Score))
	}
	if in.User != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user\":")
		if in.User == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.User).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GameHighScore) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GameHighScore) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels73(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GameHighScore) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GameHighScore) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels73(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(in *jlexer.Lexer, out *Game) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "animation":
			if in.IsNull() {
				in.Skip()
				out.Animation = nil
			} else {
				if out.Animation == nil {
					out.Animation = new(Animation)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Animation).UnmarshalJSON(data))
				}
			}
		case "description":
			if in.IsNull() {
				in.Skip()
				out.Description = nil
			} else {
				if out.Description == nil {
					out.Description = new(string)
				}
				*out.Description = string(in.String())
			}
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				in.Delim('[')
				if out.Photo == nil {
					if !in.IsDelim(']') {
						out.Photo = make([]*PhotoSize, 0, 8)
					} else {
						out.Photo = []*PhotoSize{}
					}
				} else {
					out.Photo = (out.Photo)[:0]
				}
				for !in.IsDelim(']') {
					var v46 *PhotoSize
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						if v46 == nil {
							v46 = new(PhotoSize)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v46).UnmarshalJSON(data))
						}
					}
					out.Photo = append(out.Photo, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		case "text_entities":
			if in.IsNull() {
				in.Skip()
				out.TextEntities = nil
			} else {
				in.Delim('[')
				if out.TextEntities == nil {
					if !in.IsDelim(']') {
						out.TextEntities = make([]*MessageEntity, 0, 8)
					} else {
						out.TextEntities = []*MessageEntity{}
					}
				} else {
					out.TextEntities = (out.TextEntities)[:0]
				}
				for !in.IsDelim(']') {
					var v47 *MessageEntity
					if in.IsNull() {
						in.Skip()
						v47 = nil
					} else {
						if v47 == nil {
							v47 = new(MessageEntity)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v47).UnmarshalJSON(data))
						}
					}
					out.TextEntities = append(out.TextEntities, v47)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(out *jwriter.Writer, in Game) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Animation != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"animation\":")
		if in.Animation == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Animation).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"description\":")
	if in.Description == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Description))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"photo\":")
	if in.Photo == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v48, v49 := range in.Photo {
			if v48 > 0 {
				out.RawByte(',')
			}
			if v49 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v49).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if in.Text != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"text\":")
		out.String(string(in.Text))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text_entities\":")
	if in.TextEntities == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v50, v51 := range in.TextEntities {
			if v50 > 0 {
				out.RawByte(',')
			}
			if v51 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v51).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Game) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Game) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels74(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Game) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Game) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels74(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(in *jlexer.Lexer, out *ForceReply) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "force_reply":
			out.ForceReply = bool(in.Bool())
		case "selective":
			out.Selective = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(out *jwriter.Writer, in ForceReply) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ForceReply {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"force_reply\":")
		out.Bool(bool(in.ForceReply))
	}
	if in.Selective {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"selective\":")
		out.Bool(bool(in.Selective))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ForceReply) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ForceReply) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels75(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ForceReply) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ForceReply) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels75(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(in *jlexer.Lexer, out *File) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_path":
			out.FilePath = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(out *jwriter.Writer, in File) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FilePath != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_path\":")
		out.String(string(in.FilePath))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v File) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v File) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels76(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *File) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *File) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels76(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(in *jlexer.Lexer, out *Error) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			out.Description = string(in.String())
		case "error_code":
			out.ErrorCode = int64(in.Int64())
		case "ok":
			out.Ok = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(out *jwriter.Writer, in Error) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.ErrorCode != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error_code\":")
		out.Int64(int64(in.ErrorCode))
	}
	if in.Ok {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"ok\":")
		out.Bool(bool(in.Ok))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Error) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Error) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels77(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Error) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Error) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels77(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(in *jlexer.Lexer, out *EditMessageTextBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "disable_web_page_preview":
			out.DisableWebPagePreview = bool(in.Bool())
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "parse_mode":
			out.ParseMode = ParseMode(in.String())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		case "text":
			if in.IsNull() {
				in.Skip()
				out.Text = nil
			} else {
				if out.Text == nil {
					out.Text = new(string)
				}
				*out.Text = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(out *jwriter.Writer, in EditMessageTextBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_id\":")
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.DisableWebPagePreview {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"disable_web_page_preview\":")
		out.Bool(bool(in.DisableWebPagePreview))
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.ParseMode != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"parse_mode\":")
		out.String(string(in.ParseMode))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"text\":")
	if in.Text == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Text))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageTextBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageTextBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels78(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageTextBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageTextBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels78(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(in *jlexer.Lexer, out *EditMessageReplyMarkupBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(out *jwriter.Writer, in EditMessageReplyMarkupBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_id\":")
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageReplyMarkupBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageReplyMarkupBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels79(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageReplyMarkupBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageReplyMarkupBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels79(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(in *jlexer.Lexer, out *EditMessageLiveLocationBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "latitude":
			if in.IsNull() {
				in.Skip()
				out.Latitude = nil
			} else {
				if out.Latitude == nil {
					out.Latitude = new(float64)
				}
				*out.Latitude = float64(in.Float64())
			}
		case "longitude":
			if in.IsNull() {
				in.Skip()
				out.Longitude = nil
			} else {
				if out.Longitude == nil {
					out.Longitude = new(float64)
				}
				*out.Longitude = float64(in.Float64())
			}
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if m, ok := out.ReplyMarkup.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ReplyMarkup.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ReplyMarkup = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(out *jwriter.Writer, in EditMessageLiveLocationBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_id\":")
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"latitude\":")
	if in.Latitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Latitude))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"longitude\":")
	if in.Longitude == nil {
		out.RawString("null")
	} else {
		out.Float64(float64(*in.Longitude))
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if m, ok := in.ReplyMarkup.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ReplyMarkup.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ReplyMarkup))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageLiveLocationBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageLiveLocationBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels80(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageLiveLocationBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageLiveLocationBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels80(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(in *jlexer.Lexer, out *EditMessageCaptionBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "caption":
			out.Caption = string(in.String())
		case "chat_id":
			if m, ok := out.ChatID.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.ChatID.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.ChatID = in.Interface()
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message_id":
			out.MessageID = int64(in.Int64())
		case "reply_markup":
			if in.IsNull() {
				in.Skip()
				out.ReplyMarkup = nil
			} else {
				if out.ReplyMarkup == nil {
					out.ReplyMarkup = new(InlineKeyboardMarkup)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.ReplyMarkup).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(out *jwriter.Writer, in EditMessageCaptionBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Caption != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"caption\":")
		out.String(string(in.Caption))
	}
	if in.ChatID != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_id\":")
		if m, ok := in.ChatID.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.ChatID.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.ChatID))
		}
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.MessageID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message_id\":")
		out.Int64(int64(in.MessageID))
	}
	if in.ReplyMarkup != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"reply_markup\":")
		if in.ReplyMarkup == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.ReplyMarkup).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EditMessageCaptionBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EditMessageCaptionBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels81(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EditMessageCaptionBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EditMessageCaptionBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels81(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(in *jlexer.Lexer, out *Document) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			out.FileID = string(in.String())
		case "file_name":
			out.FileName = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Thumb).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(out *jwriter.Writer, in Document) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_name\":")
		out.String(string(in.FileName))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mime_type\":")
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb\":")
		if in.Thumb == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Thumb).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Document) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Document) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels82(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Document) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Document) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels82(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(in *jlexer.Lexer, out *CreateNewStickerSetLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				if out.Emojis == nil {
					out.Emojis = new(string)
				}
				*out.Emojis = string(in.String())
			}
		case "is_masks":
			out.IsMasks = bool(in.Bool())
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaskPosition).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "png_sticker":
			if in.IsNull() {
				in.Skip()
				out.PngSticker = nil
			} else {
				if out.PngSticker == nil {
					out.PngSticker = new(string)
				}
				*out.PngSticker = string(in.String())
			}
		case "title":
			if in.IsNull() {
				in.Skip()
				out.Title = nil
			} else {
				if out.Title == nil {
					out.Title = new(string)
				}
				*out.Title = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(out *jwriter.Writer, in CreateNewStickerSetLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"emojis\":")
	if in.Emojis == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Emojis))
	}
	if in.IsMasks {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_masks\":")
		out.Bool(bool(in.IsMasks))
	}
	if in.MaskPosition != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mask_position\":")
		if in.MaskPosition == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MaskPosition).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	if in.Name == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Name))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"png_sticker\":")
	if in.PngSticker == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PngSticker))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"title\":")
	if in.Title == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	if in.UserID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateNewStickerSetLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateNewStickerSetLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels83(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateNewStickerSetLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateNewStickerSetLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels83(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(in *jlexer.Lexer, out *Contact) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "phone_number":
			out.PhoneNumber = string(in.String())
		case "user_id":
			out.UserID = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(out *jwriter.Writer, in Contact) {
	out.RawByte('{')
	first := true
	_ = first
	if in.FirstName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"first_name\":")
		out.String(string(in.FirstName))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if in.PhoneNumber != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"phone_number\":")
		out.String(string(in.PhoneNumber))
	}
	if in.UserID != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"user_id\":")
		out.Int64(int64(in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Contact) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Contact) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels84(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Contact) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Contact) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels84(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(in *jlexer.Lexer, out *ChosenInlineResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "location":
			if in.IsNull() {
				in.Skip()
				out.Location = nil
			} else {
				if out.Location == nil {
					out.Location = new(Location)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Location).UnmarshalJSON(data))
				}
			}
		case "query":
			if in.IsNull() {
				in.Skip()
				out.Query = nil
			} else {
				if out.Query == nil {
					out.Query = new(string)
				}
				*out.Query = string(in.String())
			}
		case "result_id":
			if in.IsNull() {
				in.Skip()
				out.ResultID = nil
			} else {
				if out.ResultID == nil {
					out.ResultID = new(string)
				}
				*out.ResultID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(out *jwriter.Writer, in ChosenInlineResult) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"from\":")
	if in.From == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.From).MarshalJSON())
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.Location != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"location\":")
		if in.Location == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Location).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"query\":")
	if in.Query == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Query))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"result_id\":")
	if in.ResultID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ResultID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChosenInlineResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChosenInlineResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels85(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChosenInlineResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChosenInlineResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels85(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(in *jlexer.Lexer, out *ChatPhoto) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "big_file_id":
			out.BigFileID = string(in.String())
		case "small_file_id":
			out.SmallFileID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(out *jwriter.Writer, in ChatPhoto) {
	out.RawByte('{')
	first := true
	_ = first
	if in.BigFileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"big_file_id\":")
		out.String(string(in.BigFileID))
	}
	if in.SmallFileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"small_file_id\":")
		out.String(string(in.SmallFileID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatPhoto) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatPhoto) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels86(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatPhoto) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatPhoto) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels86(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(in *jlexer.Lexer, out *ChatMember) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "can_add_web_page_previews":
			out.CanAddWebPagePreviews = bool(in.Bool())
		case "can_be_edited":
			out.CanBeEdited = bool(in.Bool())
		case "can_change_info":
			out.CanChangeInfo = bool(in.Bool())
		case "can_delete_messages":
			out.CanDeleteMessages = bool(in.Bool())
		case "can_edit_messages":
			out.CanEditMessages = bool(in.Bool())
		case "can_invite_users":
			out.CanInviteUsers = bool(in.Bool())
		case "can_pin_messages":
			out.CanPinMessages = bool(in.Bool())
		case "can_post_messages":
			out.CanPostMessages = bool(in.Bool())
		case "can_promote_members":
			out.CanPromoteMembers = bool(in.Bool())
		case "can_restrict_members":
			out.CanRestrictMembers = bool(in.Bool())
		case "can_send_media_messages":
			out.CanSendMediaMessages = bool(in.Bool())
		case "can_send_messages":
			out.CanSendMessages = bool(in.Bool())
		case "can_send_other_messages":
			out.CanSendOtherMessages = bool(in.Bool())
		case "status":
			if in.IsNull() {
				in.Skip()
				out.Status = nil
			} else {
				if out.Status == nil {
					out.Status = new(string)
				}
				*out.Status = string(in.String())
			}
		case "until_date":
			out.UntilDate = int64(in.Int64())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.User).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(out *jwriter.Writer, in ChatMember) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CanAddWebPagePreviews {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_add_web_page_previews\":")
		out.Bool(bool(in.CanAddWebPagePreviews))
	}
	if in.CanBeEdited {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_be_edited\":")
		out.Bool(bool(in.CanBeEdited))
	}
	if in.CanChangeInfo {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_change_info\":")
		out.Bool(bool(in.CanChangeInfo))
	}
	if in.CanDeleteMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_delete_messages\":")
		out.Bool(bool(in.CanDeleteMessages))
	}
	if in.CanEditMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_edit_messages\":")
		out.Bool(bool(in.CanEditMessages))
	}
	if in.CanInviteUsers {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_invite_users\":")
		out.Bool(bool(in.CanInviteUsers))
	}
	if in.CanPinMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_pin_messages\":")
		out.Bool(bool(in.CanPinMessages))
	}
	if in.CanPostMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_post_messages\":")
		out.Bool(bool(in.CanPostMessages))
	}
	if in.CanPromoteMembers {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_promote_members\":")
		out.Bool(bool(in.CanPromoteMembers))
	}
	if in.CanRestrictMembers {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_restrict_members\":")
		out.Bool(bool(in.CanRestrictMembers))
	}
	if in.CanSendMediaMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_media_messages\":")
		out.Bool(bool(in.CanSendMediaMessages))
	}
	if in.CanSendMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_messages\":")
		out.Bool(bool(in.CanSendMessages))
	}
	if in.CanSendOtherMessages {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_send_other_messages\":")
		out.Bool(bool(in.CanSendOtherMessages))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	if in.Status == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Status))
	}
	if in.UntilDate != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"until_date\":")
		out.Int64(int64(in.UntilDate))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user\":")
	if in.User == nil {
		out.RawString("null")
	} else {
		out.Raw((*in.User).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ChatMember) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ChatMember) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels87(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ChatMember) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ChatMember) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels87(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "all_members_are_administrators":
			out.AllMembersAreAdministrators = bool(in.Bool())
		case "can_set_sticker_set":
			out.CanSetStickerSet = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "first_name":
			out.FirstName = string(in.String())
		case "id":
			out.ID = int64(in.Int64())
		case "invite_link":
			out.InviteLink = string(in.String())
		case "last_name":
			out.LastName = string(in.String())
		case "photo":
			if in.IsNull() {
				in.Skip()
				out.Photo = nil
			} else {
				if out.Photo == nil {
					out.Photo = new(ChatPhoto)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Photo).UnmarshalJSON(data))
				}
			}
		case "pinned_message":
			if in.IsNull() {
				in.Skip()
				out.PinnedMessage = nil
			} else {
				if out.PinnedMessage == nil {
					out.PinnedMessage = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.PinnedMessage).UnmarshalJSON(data))
				}
			}
		case "sticker_set_name":
			out.StickerSetName = string(in.String())
		case "title":
			out.Title = string(in.String())
		case "type":
			if in.IsNull() {
				in.Skip()
				out.Type = nil
			} else {
				if out.Type == nil {
					out.Type = new(string)
				}
				*out.Type = string(in.String())
			}
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	if in.AllMembersAreAdministrators {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"all_members_are_administrators\":")
		out.Bool(bool(in.AllMembersAreAdministrators))
	}
	if in.CanSetStickerSet {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"can_set_sticker_set\":")
		out.Bool(bool(in.CanSetStickerSet))
	}
	if in.Description != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"description\":")
		out.String(string(in.Description))
	}
	if in.FirstName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"first_name\":")
		out.String(string(in.FirstName))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"id\":")
	out.Int64(int64(in.ID))
	if in.InviteLink != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"invite_link\":")
		out.String(string(in.InviteLink))
	}
	if in.LastName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"last_name\":")
		out.String(string(in.LastName))
	}
	if in.Photo != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"photo\":")
		if in.Photo == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Photo).MarshalJSON())
		}
	}
	if in.PinnedMessage != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"pinned_message\":")
		if in.PinnedMessage == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.PinnedMessage).MarshalJSON())
		}
	}
	if in.StickerSetName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"sticker_set_name\":")
		out.String(string(in.StickerSetName))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	if in.Type == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Type))
	}
	if in.Username != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"username\":")
		out.String(string(in.Username))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels88(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels88(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(in *jlexer.Lexer, out *CallbackQuery) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "chat_instance":
			out.ChatInstance = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "from":
			if in.IsNull() {
				in.Skip()
				out.From = nil
			} else {
				if out.From == nil {
					out.From = new(User)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.From).UnmarshalJSON(data))
				}
			}
		case "game_short_name":
			out.GameShortName = string(in.String())
		case "id":
			out.ID = string(in.String())
		case "inline_message_id":
			out.InlineMessageID = string(in.String())
		case "message":
			if in.IsNull() {
				in.Skip()
				out.Message = nil
			} else {
				if out.Message == nil {
					out.Message = new(Message)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Message).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(out *jwriter.Writer, in CallbackQuery) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ChatInstance != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"chat_instance\":")
		out.String(string(in.ChatInstance))
	}
	if in.Data != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"data\":")
		out.String(string(in.Data))
	}
	if in.From != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"from\":")
		if in.From == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.From).MarshalJSON())
		}
	}
	if in.GameShortName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"game_short_name\":")
		out.String(string(in.GameShortName))
	}
	if in.ID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"id\":")
		out.String(string(in.ID))
	}
	if in.InlineMessageID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"inline_message_id\":")
		out.String(string(in.InlineMessageID))
	}
	if in.Message != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"message\":")
		if in.Message == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Message).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CallbackQuery) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CallbackQuery) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels89(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CallbackQuery) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CallbackQuery) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels89(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(in *jlexer.Lexer, out *Audio) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int64(in.Int64())
		case "file_id":
			out.FileID = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "performer":
			out.Performer = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(out *jwriter.Writer, in Audio) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Duration != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"duration\":")
		out.Int64(int64(in.Duration))
	}
	if in.FileID != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_id\":")
		out.String(string(in.FileID))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mime_type\":")
		out.String(string(in.MimeType))
	}
	if in.Performer != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"performer\":")
		out.String(string(in.Performer))
	}
	if in.Title != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"title\":")
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Audio) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Audio) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels90(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Audio) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Audio) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels90(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(in *jlexer.Lexer, out *AnswerShippingQueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_message":
			out.ErrorMessage = string(in.String())
		case "ok":
			if in.IsNull() {
				in.Skip()
				out.Ok = nil
			} else {
				if out.Ok == nil {
					out.Ok = new(bool)
				}
				*out.Ok = bool(in.Bool())
			}
		case "shipping_options":
			if in.IsNull() {
				in.Skip()
				out.ShippingOptions = nil
			} else {
				in.Delim('[')
				if out.ShippingOptions == nil {
					if !in.IsDelim(']') {
						out.ShippingOptions = make([]*ShippingOption, 0, 8)
					} else {
						out.ShippingOptions = []*ShippingOption{}
					}
				} else {
					out.ShippingOptions = (out.ShippingOptions)[:0]
				}
				for !in.IsDelim(']') {
					var v52 *ShippingOption
					if in.IsNull() {
						in.Skip()
						v52 = nil
					} else {
						if v52 == nil {
							v52 = new(ShippingOption)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v52).UnmarshalJSON(data))
						}
					}
					out.ShippingOptions = append(out.ShippingOptions, v52)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "shipping_query_id":
			if in.IsNull() {
				in.Skip()
				out.ShippingQueryID = nil
			} else {
				if out.ShippingQueryID == nil {
					out.ShippingQueryID = new(string)
				}
				*out.ShippingQueryID = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(out *jwriter.Writer, in AnswerShippingQueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ErrorMessage != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"error_message\":")
		out.String(string(in.ErrorMessage))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ok\":")
	if in.Ok == nil {
		out.RawString("null")
	} else {
		out.Bool(bool(*in.Ok))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shipping_options\":")
	if in.ShippingOptions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v53, v54 := range in.ShippingOptions {
			if v53 > 0 {
				out.RawByte(',')
			}
			if v54 == nil {
				out.RawString("null")
			} else {
				out.Raw((*v54).MarshalJSON())
			}
		}
		out.RawByte(']')
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"shipping_query_id\":")
	if in.ShippingQueryID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.ShippingQueryID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerShippingQueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerShippingQueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels91(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerShippingQueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerShippingQueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels91(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(in *jlexer.Lexer, out *AnswerInlineQueryBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cache_time":
			out.CacheTime = int64(in.Int64())
		case "inline_query_id":
			if in.IsNull() {
				in.Skip()
				out.InlineQueryID = nil
			} else {
				if out.InlineQueryID == nil {
					out.InlineQueryID = new(string)
				}
				*out.InlineQueryID = string(in.String())
			}
		case "is_personal":
			out.IsPersonal = bool(in.Bool())
		case "next_offset":
			out.NextOffset = string(in.String())
		case "results":
			if in.IsNull() {
				in.Skip()
				out.Results = nil
			} else {
				in.Delim('[')
				if out.Results == nil {
					if !in.IsDelim(']') {
						out.Results = make([]interface{}, 0, 4)
					} else {
						out.Results = []interface{}{}
					}
				} else {
					out.Results = (out.Results)[:0]
				}
				for !in.IsDelim(']') {
					var v55 interface{}
					if m, ok := v55.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v55.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v55 = in.Interface()
					}
					out.Results = append(out.Results, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "switch_pm_parameter":
			out.SwitchPmParameter = string(in.String())
		case "switch_pm_text":
			out.SwitchPmText = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(out *jwriter.Writer, in AnswerInlineQueryBody) {
	out.RawByte('{')
	first := true
	_ = first
	if in.CacheTime != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"cache_time\":")
		out.Int64(int64(in.CacheTime))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"inline_query_id\":")
	if in.InlineQueryID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.InlineQueryID))
	}
	if in.IsPersonal {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"is_personal\":")
		out.Bool(bool(in.IsPersonal))
	}
	if in.NextOffset != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"next_offset\":")
		out.String(string(in.NextOffset))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"results\":")
	if in.Results == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v56, v57 := range in.Results {
			if v56 > 0 {
				out.RawByte(',')
			}
			if m, ok := v57.(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := v57.(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(v57))
			}
		}
		out.RawByte(']')
	}
	if in.SwitchPmParameter != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"switch_pm_parameter\":")
		out.String(string(in.SwitchPmParameter))
	}
	if in.SwitchPmText != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"switch_pm_text\":")
		out.String(string(in.SwitchPmText))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnswerInlineQueryBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnswerInlineQueryBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels92(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnswerInlineQueryBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnswerInlineQueryBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels92(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(in *jlexer.Lexer, out *Animation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "file_id":
			if in.IsNull() {
				in.Skip()
				out.FileID = nil
			} else {
				if out.FileID == nil {
					out.FileID = new(string)
				}
				*out.FileID = string(in.String())
			}
		case "file_name":
			out.FileName = string(in.String())
		case "file_size":
			out.FileSize = int64(in.Int64())
		case "mime_type":
			out.MimeType = string(in.String())
		case "thumb":
			if in.IsNull() {
				in.Skip()
				out.Thumb = nil
			} else {
				if out.Thumb == nil {
					out.Thumb = new(PhotoSize)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Thumb).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(out *jwriter.Writer, in Animation) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"file_id\":")
	if in.FileID == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.FileID))
	}
	if in.FileName != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_name\":")
		out.String(string(in.FileName))
	}
	if in.FileSize != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"file_size\":")
		out.Int64(int64(in.FileSize))
	}
	if in.MimeType != "" {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mime_type\":")
		out.String(string(in.MimeType))
	}
	if in.Thumb != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"thumb\":")
		if in.Thumb == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Thumb).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Animation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Animation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels93(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Animation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Animation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels93(l, v)
}
func easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(in *jlexer.Lexer, out *AddStickerToSetLinkBody) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "emojis":
			if in.IsNull() {
				in.Skip()
				out.Emojis = nil
			} else {
				if out.Emojis == nil {
					out.Emojis = new(string)
				}
				*out.Emojis = string(in.String())
			}
		case "mask_position":
			if in.IsNull() {
				in.Skip()
				out.MaskPosition = nil
			} else {
				if out.MaskPosition == nil {
					out.MaskPosition = new(MaskPosition)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.MaskPosition).UnmarshalJSON(data))
				}
			}
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "png_sticker":
			if in.IsNull() {
				in.Skip()
				out.PngSticker = nil
			} else {
				if out.PngSticker == nil {
					out.PngSticker = new(string)
				}
				*out.PngSticker = string(in.String())
			}
		case "user_id":
			if in.IsNull() {
				in.Skip()
				out.UserID = nil
			} else {
				if out.UserID == nil {
					out.UserID = new(int64)
				}
				*out.UserID = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(out *jwriter.Writer, in AddStickerToSetLinkBody) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"emojis\":")
	if in.Emojis == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Emojis))
	}
	if in.MaskPosition != nil {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"mask_position\":")
		if in.MaskPosition == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.MaskPosition).MarshalJSON())
		}
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"name\":")
	if in.Name == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.Name))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"png_sticker\":")
	if in.PngSticker == nil {
		out.RawString("null")
	} else {
		out.String(string(*in.PngSticker))
	}
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"user_id\":")
	if in.UserID == nil {
		out.RawString("null")
	} else {
		out.Int64(int64(*in.UserID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddStickerToSetLinkBody) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddStickerToSetLinkBody) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD2b7633eEncodeGithubComOlebedevGoTgbotModels94(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddStickerToSetLinkBody) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddStickerToSetLinkBody) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD2b7633eDecodeGithubComOlebedevGoTgbotModels94(l, v)
}
