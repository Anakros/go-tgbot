// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InputMediaVideo input media video
// swagger:model InputMediaVideo

type InputMediaVideo struct {

	// caption
	Caption string `json:"caption,omitempty"`

	// duration
	Duration int64 `json:"duration,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// media
	// Required: true
	Media string `json:"media"`

	// type
	// Required: true
	Type string `json:"type"`

	// width
	Width int64 `json:"width,omitempty"`
}

/* polymorph InputMediaVideo caption false */

/* polymorph InputMediaVideo duration false */

/* polymorph InputMediaVideo height false */

/* polymorph InputMediaVideo media false */

/* polymorph InputMediaVideo type false */

/* polymorph InputMediaVideo width false */

// Validate validates this input media video
func (m *InputMediaVideo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMedia(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InputMediaVideo) validateMedia(formats strfmt.Registry) error {

	if err := validate.RequiredString("media", "body", string(m.Media)); err != nil {
		return err
	}

	return nil
}

func (m *InputMediaVideo) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InputMediaVideo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InputMediaVideo) UnmarshalBinary(b []byte) error {
	var res InputMediaVideo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
